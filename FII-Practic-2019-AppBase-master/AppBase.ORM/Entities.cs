//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AppBase.ORM.Entities
{
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Collections.Specialized;
    using System.Data;
    using System.Data.SqlClient;
    using System.Diagnostics;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;

    #region User
    public partial class User : BaseEntity
    {
        #region UserName
        private System.String _userName;
        /// <summary>
        /// Get or set UserName
        /// </summary>
        [JsonProperty("userName")]
        [EntityProperty]
        public System.String UserName
        {
            get { return _userName; }
            set { _userName = value; }
        }
        #endregion

        #region Email
        private System.String _email;
        /// <summary>
        /// Get or set Email
        /// </summary>
        [JsonProperty("email")]
        [EntityProperty]
        public System.String Email
        {
            get { return _email; }
            set { _email = value; }
        }
        #endregion

        #region FirstName
        private System.String _firstName;
        /// <summary>
        /// Get or set FirstName
        /// </summary>
        [JsonProperty("firstName")]
        [EntityProperty]
        public System.String FirstName
        {
            get { return _firstName; }
            set { _firstName = value; }
        }
        #endregion

        #region LastName
        private System.String _lastName;
        /// <summary>
        /// Get or set LastName
        /// </summary>
        [JsonProperty("lastName")]
        [EntityProperty]
        public System.String LastName
        {
            get { return _lastName; }
            set { _lastName = value; }
        }
        #endregion

        #region BirthDate
        private System.Nullable<System.DateTime> _birthDate;
        /// <summary>
        /// Get or set BirthDate
        /// </summary>
        [JsonProperty("birthDate")]
        [EntityProperty]
        public System.Nullable<System.DateTime> BirthDate
        {
            get { return _birthDate; }
            set { _birthDate = value; }
        }
        #endregion

        #region Roles
        private BaseEntityCollection<Role> _roles;
        /// <summary>
        /// Get or set Roles
        /// </summary>
        [JsonProperty("roles")]
        [EntityProperty]
        public BaseEntityCollection<Role> Roles
        {
            get { return _roles; }
            internal set { _roles = value; }
        }
        #endregion

        public User()
        {
            _roles = new BaseEntityCollection<Role>();
        }

        /// <summary>
        /// Create a new instance of repository
        /// </summary>
        /// <param name="conn">DB connection</param>
        /// <returns>Repository</returns>
        public override BaseRepository CreateRepository(SqlConnection conn)
        {
            return new UserRepository(conn);
        }

        /// <summary>
        /// Initialize entity from a data row
        /// </summary>
        /// <param name="row">Data row</param>
        public override void FromDataRow(DataRow row)
        {
            if (row == null)
                throw new ArgumentNullException("row");

            UserName = (System.String)row["UserName"];
            Email = (System.String)row["Email"];
            FirstName = !row.IsNull("FirstName") ? (System.String)row["FirstName"] : (System.String)null;
            LastName = !row.IsNull("LastName") ? (System.String)row["LastName"] : (System.String)null;
            BirthDate = !row.IsNull("BirthDate") ? (System.Nullable<System.DateTime>)row["BirthDate"] : (System.Nullable<System.DateTime>)null;
        }

        /// <summary>
        /// Initialize entity from another entity
        /// </summary>
        /// <param name="entity">Entity</param>
        public override void FromEntity(BaseEntity entity)
        {
            if (entity == null)
                throw new ArgumentNullException("entity");
            if (!(entity is User))
                throw new ModelException(
                    "User cannot be initialized from an entity other than a \"User\""
                    );

            var typedEntity = (User)entity;
            UserName = typedEntity.UserName;
            Email = typedEntity.Email;
            FirstName = typedEntity.FirstName;
            LastName = typedEntity.LastName;
            BirthDate = typedEntity.BirthDate;
            Roles = typedEntity.Roles;
        }

        /// <summary>
        /// Get entity key
        /// </summary>
        /// <returns>A dictionary that represents the key</returns>
        public override Dictionary<string, object> GetKey()
        {
            var key = new Dictionary<string, object>();
            key.Add("UserName", UserName);
            return key;
        }

        /// <summary>
        /// Clone entity
        /// </summary>
        /// <returns>A clone</returns>
        public override BaseEntity Clone()
        {
            var clone = new User();
            clone.UserName = UserName;
            clone.Email = Email;
            clone.FirstName = FirstName;
            clone.LastName = LastName;
            clone.BirthDate = BirthDate;
            clone.Roles = (BaseEntityCollection<Role>)Roles?.Clone();
            return clone;
        }
    }

    public partial class UserRepository : BaseRepository
    {
        public UserRepository(SqlConnection conn)
            : base(conn, new List<Type>() { typeof(User), typeof(Role), typeof(UserInRole), typeof(Function), typeof(Right) })
        {
        }

        /// <summary>
        /// Insert or update entity
        /// </summary>
        /// <param name="entity">Entity</param>
        /// <param name="tr">Transaction</param>
        /// <param name="skipNestedObjects">
        ///     Flag specifying whether to skip or not InsertOrUpdate for nested objects (optional)
        /// </param>
        public override void InsertOrUpdate(BaseEntity entity, SqlTransaction tr, bool skipNestedObjects = false)
        {
            if (entity == null)
                throw new ArgumentNullException("entity");
            if (!(entity is User))
                throw new ModelException(
                    "UserRepository " +
                    "cannot perform operations on \"" + entity.GetType().Name + "\""
                    );

            var typedEntity = (User)entity;

            #region Validate fields
            if (typedEntity.UserName == null)
                throw new ArgumentNullException("entity.UserName");
            if (typedEntity.Email == null)
                throw new ArgumentNullException("entity.Email");
            #endregion

            using (var cmd = Connection.CreateCommand())
            {
                cmd.Transaction = tr;

                if (!skipNestedObjects)
                {
                    foreach (var nestedEntity in typedEntity.Clone().Flatten().OrderBy(x => Hierarchy.IndexOf(x.GetType())))
                        nestedEntity.CreateRepository(Connection).InsertOrUpdate(nestedEntity, tr, true);
                }
                else
                {
                    #region Insert User
                    cmd.CommandText = @"
                        IF NOT EXISTS (
                            SELECT TOP 1 * FROM [dbo].[Users]
                            WHERE ([UserName] = @UserName)
                            )
                        BEGIN
                            INSERT INTO [dbo].[Users] ([UserName], [Email], [FirstName], [LastName], [BirthDate]) VALUES
                                (@UserName, @Email, @FirstName, @LastName, @BirthDate);
                        END
                        ELSE
                        BEGIN
                            UPDATE [dbo].[Users] SET
                                [Email] = @Email, [FirstName] = @FirstName, [LastName] = @LastName, [BirthDate] = @BirthDate
                            WHERE ([UserName] = @UserName);
                        END
                        ";
                    cmd.Parameters.AddWithValue("@UserName", typedEntity.UserName);
                    cmd.Parameters.AddWithValue("@Email", typedEntity.Email);
                    cmd.Parameters.AddWithValue("@FirstName", typedEntity.FirstName ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@LastName", typedEntity.LastName ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@BirthDate", typedEntity.BirthDate ?? (object)DBNull.Value);
                    Debug.WriteLine("UserRepository.InsertOrUpdate: INSERT INTO [dbo].[Users]; " +
                        "SkipNestedObjects=" + skipNestedObjects);
                    Debug.WriteLine("    " + "UserName=" + typedEntity.UserName);
                    cmd.ExecuteNonQuery();
                    #endregion
                }

                #region Insert UserInRole
                foreach (var item in typedEntity.Roles)
                {
                    cmd.Parameters.Clear();
                    cmd.CommandText = @"
                        IF NOT EXISTS (
                            SELECT TOP 1 * FROM [dbo].[UserInRoles]
                            WHERE ([UserName] = @UserName AND [RoleName] = @RoleName)
                            )
                        BEGIN
                            INSERT INTO [dbo].[UserInRoles] ([UserName], [RoleName]) VALUES
                                (@UserName, @RoleName);
                        END
                        ";
                    cmd.Parameters.AddWithValue("@UserName", typedEntity.UserName);
                    cmd.Parameters.AddWithValue("@RoleName", item.RoleName);
                    Debug.WriteLine("UserRepository.InsertOrUpdate: INSERT INTO [dbo].[UserInRoles]; " +
                        "SkipNestedObjects=" + skipNestedObjects);
                    Debug.WriteLine("    " + "UserName=" + typedEntity.UserName);
                    cmd.ExecuteNonQuery();
                }
                #endregion

            }
        }

        /// <summary>
        /// Delete entity
        /// </summary>
        /// <param name="entity">Entity</param>
        /// <param name="tr">Transaction</param>
        /// <param name="skipNestedObjects">
        ///     Flag specifying whether to skip or not Delete for nested objects (optional)
        /// </param>
        public override void Delete(BaseEntity entity, SqlTransaction tr, bool skipNestedObjects = false)
        {
            if (entity == null)
                throw new ArgumentNullException("entity");
            if (!(entity is User))
                throw new ModelException(
                    "UserRepository " +
                    "cannot perform operations on \"" + entity.GetType().Name + "\""
                    );

            var typedEntity = (User)entity;

            using (var cmd = Connection.CreateCommand())
            {
                cmd.Transaction = tr;

                #region Delete UserInRole
                cmd.Parameters.Clear();
                cmd.CommandText = @"
                    DELETE FROM [dbo].[UserInRoles] WHERE
                        ([UserName] = @UserName);
                    ";
                cmd.Parameters.AddWithValue("@UserName", typedEntity.UserName);
                Debug.WriteLine("UserRepository.Delete: DELETE FROM [dbo].[UserInRoles]; " +
                    "SkipNestedObjects=" + skipNestedObjects);
                Debug.WriteLine("    " + "UserName=" + typedEntity.UserName);
                cmd.ExecuteNonQuery();
                #endregion

                if (!skipNestedObjects)
                {
                    var tempRoles = typedEntity.Roles;
                    typedEntity.Roles = null;

                    foreach (var nestedEntity in typedEntity.Clone().Flatten().OrderBy(x => Hierarchy.IndexOf(x.GetType())))
                        nestedEntity.CreateRepository(Connection).Delete(nestedEntity, tr, true);

                    typedEntity.Roles = tempRoles;

                }
                else
                {
                    #region Delete User
                    cmd.Parameters.Clear();
                    cmd.CommandText = @"
                        DELETE FROM [dbo].[Users] WHERE
                            ([UserName] = @UserName);
                        ";
                    cmd.Parameters.AddWithValue("@UserName", typedEntity.UserName);
                    Debug.WriteLine("UserRepository.Delete: DELETE FROM [dbo].[Users]; " +
                        "SkipNestedObjects=" + skipNestedObjects);
                    Debug.WriteLine("    " + "UserName=" + typedEntity.UserName);
                    cmd.ExecuteNonQuery();
                    #endregion
                }
            }
        }

        /// <summary>
        /// Select one entity by key
        /// </summary>
        /// <param name="key">Key (a dictionary containing key column name and its value)</param>
        /// <returns>An entity</returns>
        public override BaseEntity SelectOne(Dictionary<string, object> key)
        {
            #region Validate key
            if (key == null)
                throw new ArgumentNullException("key");
            if (!key.ContainsKey("UserName"))
                throw new ArgumentNullException("UserName");
            #endregion

            using (var cmd = Connection.CreateCommand())
            {
                cmd.CommandText = @"
                    SELECT TOP 1 this.[UserName] AS [UserName], this.[Email] AS [Email], this.[FirstName] AS [FirstName], this.[LastName] AS [LastName], this.[BirthDate] AS [BirthDate]
                    FROM [dbo].[Users] AS this
                    WHERE ([UserName] = @UserName);
                    ";

                cmd.Parameters.AddWithValue("@UserName", (System.String)key["UserName"]);

                var tbl = new DataTable();
                using (var reader = cmd.ExecuteReader())
                    tbl.Load(reader);

                if (tbl.Rows.Count == 0)
                    return null;

                var entity = new User();
                entity.FromDataRow(tbl.Rows[0]);

                #region Load Role
                cmd.Parameters.Clear();
                cmd.CommandText = @"
                    SELECT child.[RoleName] AS [RoleName]
                    FROM [dbo].[Roles] AS child
                    RIGHT JOIN [dbo].[UserInRoles] AS parent
                        ON (parent.[RoleName] = child.[RoleName])
                    WHERE (parent.[UserName] = @UserName);
                    ";

                cmd.Parameters.AddWithValue("@UserName", entity.UserName);

                var roleTbl = new DataTable();
                using (var reader = cmd.ExecuteReader())
                    roleTbl.Load(reader);

                if (roleTbl.Rows.Count > 0)
                    foreach (DataRow row in roleTbl.Rows)
                    {
                        var child = new Role();
                        child.FromDataRow(row);
                        entity.Roles.Add(child);
                    }
                #endregion

                return entity;
            }
        }

        /// <summary>
        /// Select one entity by key
        /// </summary>
        /// <param name="userName">UserName</param>
        /// <returns>An entity</returns>
        public User SelectOne(System.String userName)
        {
            var key = new Dictionary<string, object>();
            key.Add("UserName", userName);
            return (User)SelectOne(key);
        }

        /// <summary>
        /// Select all entities
        /// </summary>
        /// <param name="skip">Skip</param>
        /// <param name="take">Take</param>
        /// <returns>A collection of entities</returns>
        public override BaseEntityCollection<BaseEntity> SelectAll(int skip = 0, int take = 100)
        {
            using (var cmd = Connection.CreateCommand())
            {
                cmd.CommandText = @"
                    SELECT [UserName] AS [UserName], [Email] AS [Email], [FirstName] AS [FirstName], [LastName] AS [LastName], [BirthDate] AS [BirthDate]
                    FROM [dbo].[Users]
                    ORDER BY [UserName]
                    OFFSET " + skip + @" ROWS FETCH NEXT " + take + @" ROWS ONLY;
                    ";

                var coll = new BaseEntityCollection<BaseEntity>();
                var tbl = new DataTable();
                using (var reader = cmd.ExecuteReader())
                    tbl.Load(reader);

                if (tbl.Rows.Count > 0)
                    foreach (DataRow row in tbl.Rows)
                    {
                        var entity = new User();
                        entity.FromDataRow(row);
                        coll.Add(entity);
                    }

                return coll;
            }
        }

        /// <summary>
        /// Count entities
        /// </summary>
        /// <returns>Num. of entities</returns>
        public override int Count()
        {
            using (var cmd = Connection.CreateCommand())
            {
                cmd.CommandText = @"SELECT COUNT(*) FROM [dbo].[Users];";
                return (int)cmd.ExecuteScalar();
            }
        }
    }
    #endregion

    #region UserInRole
    public partial class UserInRole : BaseEntity
    {
        #region UserName
        private System.String _userName;
        /// <summary>
        /// Get or set UserName
        /// </summary>
        [JsonProperty("userName")]
        [EntityProperty]
        public System.String UserName
        {
            get { return _userName; }
            set { _userName = value; }
        }
        #endregion

        #region RoleName
        private System.String _roleName;
        /// <summary>
        /// Get or set RoleName
        /// </summary>
        [JsonProperty("roleName")]
        [EntityProperty]
        public System.String RoleName
        {
            get { return _roleName; }
            set { _roleName = value; }
        }
        #endregion

        #region User
        private User _user;
        /// <summary>
        /// Get or set User
        /// </summary>
        [JsonProperty("user")]
        [EntityProperty]
        public User User
        {
            get { return _user; }
            set { _user = value; }
        }
        #endregion

        #region Role
        private Role _role;
        /// <summary>
        /// Get or set Role
        /// </summary>
        [JsonProperty("role")]
        [EntityProperty]
        public Role Role
        {
            get { return _role; }
            set { _role = value; }
        }
        #endregion

        public UserInRole()
        {
        }

        /// <summary>
        /// Create a new instance of repository
        /// </summary>
        /// <param name="conn">DB connection</param>
        /// <returns>Repository</returns>
        public override BaseRepository CreateRepository(SqlConnection conn)
        {
            return new UserInRoleRepository(conn);
        }

        /// <summary>
        /// Initialize entity from a data row
        /// </summary>
        /// <param name="row">Data row</param>
        public override void FromDataRow(DataRow row)
        {
            if (row == null)
                throw new ArgumentNullException("row");

            UserName = (System.String)row["UserName"];
            RoleName = (System.String)row["RoleName"];
        }

        /// <summary>
        /// Initialize entity from another entity
        /// </summary>
        /// <param name="entity">Entity</param>
        public override void FromEntity(BaseEntity entity)
        {
            if (entity == null)
                throw new ArgumentNullException("entity");
            if (!(entity is UserInRole))
                throw new ModelException(
                    "UserInRole cannot be initialized from an entity other than a \"UserInRole\""
                    );

            var typedEntity = (UserInRole)entity;
            UserName = typedEntity.UserName;
            RoleName = typedEntity.RoleName;
            User = typedEntity.User;
            Role = typedEntity.Role;
        }

        /// <summary>
        /// Get entity key
        /// </summary>
        /// <returns>A dictionary that represents the key</returns>
        public override Dictionary<string, object> GetKey()
        {
            var key = new Dictionary<string, object>();
            key.Add("UserName", UserName);
            key.Add("RoleName", RoleName);
            return key;
        }

        /// <summary>
        /// Clone entity
        /// </summary>
        /// <returns>A clone</returns>
        public override BaseEntity Clone()
        {
            var clone = new UserInRole();
            clone.UserName = UserName;
            clone.RoleName = RoleName;
            clone.User = (User)User?.Clone();
            clone.Role = (Role)Role?.Clone();
            return clone;
        }
    }

    public partial class UserInRoleRepository : BaseRepository
    {
        public UserInRoleRepository(SqlConnection conn)
            : base(conn, new List<Type>() { typeof(User), typeof(Role), typeof(UserInRole), typeof(Function), typeof(Right) })
        {
        }

        /// <summary>
        /// Insert or update entity
        /// </summary>
        /// <param name="entity">Entity</param>
        /// <param name="tr">Transaction</param>
        /// <param name="skipNestedObjects">
        ///     Flag specifying whether to skip or not InsertOrUpdate for nested objects (optional)
        /// </param>
        public override void InsertOrUpdate(BaseEntity entity, SqlTransaction tr, bool skipNestedObjects = false)
        {
            if (entity == null)
                throw new ArgumentNullException("entity");
            if (!(entity is UserInRole))
                throw new ModelException(
                    "UserInRoleRepository " +
                    "cannot perform operations on \"" + entity.GetType().Name + "\""
                    );

            var typedEntity = (UserInRole)entity;

            using (var cmd = Connection.CreateCommand())
            {
                cmd.Transaction = tr;

                if (!skipNestedObjects)
                {
                    foreach (var nestedEntity in typedEntity.Clone().Flatten().OrderBy(x => Hierarchy.IndexOf(x.GetType())))
                        nestedEntity.CreateRepository(Connection).InsertOrUpdate(nestedEntity, tr, true);
                }
                else
                {
                    #region Insert UserInRole
                    cmd.CommandText = @"
                        IF NOT EXISTS (
                            SELECT TOP 1 * FROM [dbo].[UserInRoles]
                            WHERE ([UserName] = @UserName AND [RoleName] = @RoleName)
                            )
                        BEGIN
                            INSERT INTO [dbo].[UserInRoles] ([UserName], [RoleName]) VALUES
                                (@UserName, @RoleName);
                        END
                        ";
                    cmd.Parameters.AddWithValue("@UserName", typedEntity?.User?.UserName ?? typedEntity.UserName);
                    cmd.Parameters.AddWithValue("@RoleName", typedEntity?.Role?.RoleName ?? typedEntity.RoleName);
                    Debug.WriteLine("UserInRoleRepository.InsertOrUpdate: INSERT INTO [dbo].[UserInRoles]; " +
                        "SkipNestedObjects=" + skipNestedObjects);
                    Debug.WriteLine("    " + "UserName=" + typedEntity.UserName + ";" + "RoleName=" + typedEntity.RoleName);
                    cmd.ExecuteNonQuery();
                    #endregion
                }

            }
        }

        /// <summary>
        /// Delete entity
        /// </summary>
        /// <param name="entity">Entity</param>
        /// <param name="tr">Transaction</param>
        /// <param name="skipNestedObjects">
        ///     Flag specifying whether to skip or not Delete for nested objects (optional)
        /// </param>
        public override void Delete(BaseEntity entity, SqlTransaction tr, bool skipNestedObjects = false)
        {
            if (entity == null)
                throw new ArgumentNullException("entity");
            if (!(entity is UserInRole))
                throw new ModelException(
                    "UserInRoleRepository " +
                    "cannot perform operations on \"" + entity.GetType().Name + "\""
                    );

            var typedEntity = (UserInRole)entity;

            using (var cmd = Connection.CreateCommand())
            {
                cmd.Transaction = tr;

                if (!skipNestedObjects)
                {
                    var tempUser = typedEntity.User;
                    typedEntity.User = null;
                    var tempRole = typedEntity.Role;
                    typedEntity.Role = null;

                    foreach (var nestedEntity in typedEntity.Clone().Flatten().OrderBy(x => Hierarchy.IndexOf(x.GetType())))
                        nestedEntity.CreateRepository(Connection).Delete(nestedEntity, tr, true);

                    typedEntity.User = tempUser;
                    typedEntity.Role = tempRole;

                }
                else
                {
                    #region Delete UserInRole
                    cmd.Parameters.Clear();
                    cmd.CommandText = @"
                        DELETE FROM [dbo].[UserInRoles] WHERE
                            ([UserName] = @UserName AND [RoleName] = @RoleName);
                        ";
                    cmd.Parameters.AddWithValue("@UserName", typedEntity?.User?.UserName ?? typedEntity.UserName);
                    cmd.Parameters.AddWithValue("@RoleName", typedEntity?.Role?.RoleName ?? typedEntity.RoleName);
                    Debug.WriteLine("UserInRoleRepository.Delete: DELETE FROM [dbo].[UserInRoles]; " +
                        "SkipNestedObjects=" + skipNestedObjects);
                    Debug.WriteLine("    " + "UserName=" + typedEntity.UserName + "; " + "RoleName=" + typedEntity.RoleName);
                    cmd.ExecuteNonQuery();
                    #endregion
                }
            }
        }

        /// <summary>
        /// Select one entity by key
        /// </summary>
        /// <param name="key">Key (a dictionary containing key column name and its value)</param>
        /// <returns>An entity</returns>
        public override BaseEntity SelectOne(Dictionary<string, object> key)
        {
            #region Validate key
            if (key == null)
                throw new ArgumentNullException("key");
            if (!key.ContainsKey("UserName"))
                throw new ArgumentNullException("UserName");
            if (!key.ContainsKey("RoleName"))
                throw new ArgumentNullException("RoleName");
            #endregion

            using (var cmd = Connection.CreateCommand())
            {
                cmd.CommandText = @"
                    SELECT TOP 1 this.[UserName] AS [UserName], this.[RoleName] AS [RoleName]
                    FROM [dbo].[UserInRoles] AS this
                    WHERE ([UserName] = @UserName AND [RoleName] = @RoleName);
                    ";

                cmd.Parameters.AddWithValue("@UserName", (System.String)key["UserName"]);
                cmd.Parameters.AddWithValue("@RoleName", (System.String)key["RoleName"]);

                var tbl = new DataTable();
                using (var reader = cmd.ExecuteReader())
                    tbl.Load(reader);

                if (tbl.Rows.Count == 0)
                    return null;

                var entity = new UserInRole();
                entity.FromDataRow(tbl.Rows[0]);

                #region Load User
                cmd.Parameters.Clear();
                cmd.CommandText = @"
                    SELECT [UserName] AS [UserName], [Email] AS [Email], [FirstName] AS [FirstName], [LastName] AS [LastName], [BirthDate] AS [BirthDate]
                    FROM [dbo].[Users]
                    WHERE ([UserName] = @UserName);
                    ";

                cmd.Parameters.AddWithValue("@UserName", entity.UserName);

                var userTbl = new DataTable();
                using (var reader = cmd.ExecuteReader())
                    userTbl.Load(reader);

                if (userTbl.Rows.Count > 0)
                    foreach (DataRow row in userTbl.Rows)
                    {
                        var child = new User();
                        child.FromDataRow(row);
                        entity.User = child;
                    }
                #endregion

                #region Load Role
                cmd.Parameters.Clear();
                cmd.CommandText = @"
                    SELECT [RoleName] AS [RoleName]
                    FROM [dbo].[Roles]
                    WHERE ([RoleName] = @RoleName);
                    ";

                cmd.Parameters.AddWithValue("@RoleName", entity.RoleName);

                var roleTbl = new DataTable();
                using (var reader = cmd.ExecuteReader())
                    roleTbl.Load(reader);

                if (roleTbl.Rows.Count > 0)
                    foreach (DataRow row in roleTbl.Rows)
                    {
                        var child = new Role();
                        child.FromDataRow(row);
                        entity.Role = child;
                    }
                #endregion

                return entity;
            }
        }

        /// <summary>
        /// Select one entity by key
        /// </summary>
        /// <param name="userName">UserName</param>
        /// <param name="roleName">RoleName</param>
        /// <returns>An entity</returns>
        public UserInRole SelectOne(System.String userName, System.String roleName)
        {
            var key = new Dictionary<string, object>();
            key.Add("UserName", userName);
            key.Add("RoleName", roleName);
            return (UserInRole)SelectOne(key);
        }

        /// <summary>
        /// Select all entities
        /// </summary>
        /// <param name="skip">Skip</param>
        /// <param name="take">Take</param>
        /// <returns>A collection of entities</returns>
        public override BaseEntityCollection<BaseEntity> SelectAll(int skip = 0, int take = 100)
        {
            using (var cmd = Connection.CreateCommand())
            {
                cmd.CommandText = @"
                    SELECT [UserName] AS [UserName], [RoleName] AS [RoleName]
                    FROM [dbo].[UserInRoles]
                    ORDER BY [UserName], [RoleName]
                    OFFSET " + skip + @" ROWS FETCH NEXT " + take + @" ROWS ONLY;
                    ";

                var coll = new BaseEntityCollection<BaseEntity>();
                var tbl = new DataTable();
                using (var reader = cmd.ExecuteReader())
                    tbl.Load(reader);

                if (tbl.Rows.Count > 0)
                    foreach (DataRow row in tbl.Rows)
                    {
                        var entity = new UserInRole();
                        entity.FromDataRow(row);
                        coll.Add(entity);
                    }

                return coll;
            }
        }

        /// <summary>
        /// Count entities
        /// </summary>
        /// <returns>Num. of entities</returns>
        public override int Count()
        {
            using (var cmd = Connection.CreateCommand())
            {
                cmd.CommandText = @"SELECT COUNT(*) FROM [dbo].[UserInRoles];";
                return (int)cmd.ExecuteScalar();
            }
        }
    }
    #endregion

    #region Role
    public partial class Role : BaseEntity
    {
        #region RoleName
        private System.String _roleName;
        /// <summary>
        /// Get or set RoleName
        /// </summary>
        [JsonProperty("roleName")]
        [EntityProperty]
        public System.String RoleName
        {
            get { return _roleName; }
            set { _roleName = value; }
        }
        #endregion

        #region Users
        private BaseEntityCollection<User> _users;
        /// <summary>
        /// Get or set Users
        /// </summary>
        [JsonProperty("users")]
        [EntityProperty]
        public BaseEntityCollection<User> Users
        {
            get { return _users; }
            internal set { _users = value; }
        }
        #endregion

        #region Rights
        private BaseEntityCollection<Right> _rights;
        /// <summary>
        /// Get or set Rights
        /// </summary>
        [JsonProperty("rights")]
        [EntityProperty]
        public BaseEntityCollection<Right> Rights
        {
            get { return _rights; }
            internal set { _rights = value; }
        }
        #endregion

        public Role()
        {
            _users = new BaseEntityCollection<User>();
            _rights = new BaseEntityCollection<Right>();
            _rights.CollectionEntityFlatten +=
                (Right entity) =>
                {
                    entity.RoleName = RoleName;
                };
        }

        /// <summary>
        /// Create a new instance of repository
        /// </summary>
        /// <param name="conn">DB connection</param>
        /// <returns>Repository</returns>
        public override BaseRepository CreateRepository(SqlConnection conn)
        {
            return new RoleRepository(conn);
        }

        /// <summary>
        /// Initialize entity from a data row
        /// </summary>
        /// <param name="row">Data row</param>
        public override void FromDataRow(DataRow row)
        {
            if (row == null)
                throw new ArgumentNullException("row");

            RoleName = (System.String)row["RoleName"];
        }

        /// <summary>
        /// Initialize entity from another entity
        /// </summary>
        /// <param name="entity">Entity</param>
        public override void FromEntity(BaseEntity entity)
        {
            if (entity == null)
                throw new ArgumentNullException("entity");
            if (!(entity is Role))
                throw new ModelException(
                    "Role cannot be initialized from an entity other than a \"Role\""
                    );

            var typedEntity = (Role)entity;
            RoleName = typedEntity.RoleName;
            Users = typedEntity.Users;
            Rights = typedEntity.Rights;
        }

        /// <summary>
        /// Get entity key
        /// </summary>
        /// <returns>A dictionary that represents the key</returns>
        public override Dictionary<string, object> GetKey()
        {
            var key = new Dictionary<string, object>();
            key.Add("RoleName", RoleName);
            return key;
        }

        /// <summary>
        /// Clone entity
        /// </summary>
        /// <returns>A clone</returns>
        public override BaseEntity Clone()
        {
            var clone = new Role();
            clone.RoleName = RoleName;
            clone.Users = (BaseEntityCollection<User>)Users?.Clone();
            clone.Rights = (BaseEntityCollection<Right>)Rights?.Clone();
            return clone;
        }
    }

    public partial class RoleRepository : BaseRepository
    {
        public RoleRepository(SqlConnection conn)
            : base(conn, new List<Type>() { typeof(Role), typeof(User), typeof(UserInRole), typeof(Function), typeof(Right) })
        {
        }

        /// <summary>
        /// Insert or update entity
        /// </summary>
        /// <param name="entity">Entity</param>
        /// <param name="tr">Transaction</param>
        /// <param name="skipNestedObjects">
        ///     Flag specifying whether to skip or not InsertOrUpdate for nested objects (optional)
        /// </param>
        public override void InsertOrUpdate(BaseEntity entity, SqlTransaction tr, bool skipNestedObjects = false)
        {
            if (entity == null)
                throw new ArgumentNullException("entity");
            if (!(entity is Role))
                throw new ModelException(
                    "RoleRepository " +
                    "cannot perform operations on \"" + entity.GetType().Name + "\""
                    );

            var typedEntity = (Role)entity;

            #region Validate fields
            if (typedEntity.RoleName == null)
                throw new ArgumentNullException("entity.RoleName");
            #endregion

            using (var cmd = Connection.CreateCommand())
            {
                cmd.Transaction = tr;

                if (!skipNestedObjects)
                {
                    foreach (var nestedEntity in typedEntity.Clone().Flatten().OrderBy(x => Hierarchy.IndexOf(x.GetType())))
                        nestedEntity.CreateRepository(Connection).InsertOrUpdate(nestedEntity, tr, true);
                }
                else
                {
                    #region Insert Role
                    cmd.CommandText = @"
                        IF NOT EXISTS (
                            SELECT TOP 1 * FROM [dbo].[Roles]
                            WHERE ([RoleName] = @RoleName)
                            )
                        BEGIN
                            INSERT INTO [dbo].[Roles] ([RoleName]) VALUES
                                (@RoleName);
                        END
                        ";
                    cmd.Parameters.AddWithValue("@RoleName", typedEntity.RoleName);
                    Debug.WriteLine("RoleRepository.InsertOrUpdate: INSERT INTO [dbo].[Roles]; " +
                        "SkipNestedObjects=" + skipNestedObjects);
                    Debug.WriteLine("    " + "RoleName=" + typedEntity.RoleName);
                    cmd.ExecuteNonQuery();
                    #endregion
                }

                #region Insert UserInRole
                foreach (var item in typedEntity.Users)
                {
                    cmd.Parameters.Clear();
                    cmd.CommandText = @"
                        IF NOT EXISTS (
                            SELECT TOP 1 * FROM [dbo].[UserInRoles]
                            WHERE ([RoleName] = @RoleName AND [UserName] = @UserName)
                            )
                        BEGIN
                            INSERT INTO [dbo].[UserInRoles] ([RoleName], [UserName]) VALUES
                                (@RoleName, @UserName);
                        END
                        ";
                    cmd.Parameters.AddWithValue("@RoleName", typedEntity.RoleName);
                    cmd.Parameters.AddWithValue("@UserName", item.UserName);
                    Debug.WriteLine("RoleRepository.InsertOrUpdate: INSERT INTO [dbo].[UserInRoles]; " +
                        "SkipNestedObjects=" + skipNestedObjects);
                    Debug.WriteLine("    " + "RoleName=" + typedEntity.RoleName);
                    cmd.ExecuteNonQuery();
                }
                #endregion

            }
        }

        /// <summary>
        /// Delete entity
        /// </summary>
        /// <param name="entity">Entity</param>
        /// <param name="tr">Transaction</param>
        /// <param name="skipNestedObjects">
        ///     Flag specifying whether to skip or not Delete for nested objects (optional)
        /// </param>
        public override void Delete(BaseEntity entity, SqlTransaction tr, bool skipNestedObjects = false)
        {
            if (entity == null)
                throw new ArgumentNullException("entity");
            if (!(entity is Role))
                throw new ModelException(
                    "RoleRepository " +
                    "cannot perform operations on \"" + entity.GetType().Name + "\""
                    );

            var typedEntity = (Role)entity;

            using (var cmd = Connection.CreateCommand())
            {
                cmd.Transaction = tr;

                #region Delete UserInRole
                cmd.Parameters.Clear();
                cmd.CommandText = @"
                    DELETE FROM [dbo].[UserInRoles] WHERE
                        ([RoleName] = @RoleName);
                    ";
                cmd.Parameters.AddWithValue("@RoleName", typedEntity.RoleName);
                Debug.WriteLine("RoleRepository.Delete: DELETE FROM [dbo].[UserInRoles]; " +
                    "SkipNestedObjects=" + skipNestedObjects);
                Debug.WriteLine("    " + "RoleName=" + typedEntity.RoleName);
                cmd.ExecuteNonQuery();
                #endregion

                #region Delete Right
                cmd.Parameters.Clear();
                cmd.CommandText = @"
                    DELETE FROM [dbo].[Rights] WHERE
                        ([RoleName] = @RoleName);
                    ";
                cmd.Parameters.AddWithValue("@RoleName", typedEntity.RoleName);
                Debug.WriteLine("RoleRepository.Delete: DELETE FROM [dbo].[Rights]; " +
                    "SkipNestedObjects=" + skipNestedObjects);
                Debug.WriteLine("    " + "RoleName=" + typedEntity.RoleName);
                cmd.ExecuteNonQuery();
                #endregion

                if (!skipNestedObjects)
                {
                    var tempUsers = typedEntity.Users;
                    typedEntity.Users = null;

                    foreach (var nestedEntity in typedEntity.Clone().Flatten().OrderBy(x => Hierarchy.IndexOf(x.GetType())))
                        nestedEntity.CreateRepository(Connection).Delete(nestedEntity, tr, true);

                    typedEntity.Users = tempUsers;

                }
                else
                {
                    #region Delete Role
                    cmd.Parameters.Clear();
                    cmd.CommandText = @"
                        DELETE FROM [dbo].[Roles] WHERE
                            ([RoleName] = @RoleName);
                        ";
                    cmd.Parameters.AddWithValue("@RoleName", typedEntity.RoleName);
                    Debug.WriteLine("RoleRepository.Delete: DELETE FROM [dbo].[Roles]; " +
                        "SkipNestedObjects=" + skipNestedObjects);
                    Debug.WriteLine("    " + "RoleName=" + typedEntity.RoleName);
                    cmd.ExecuteNonQuery();
                    #endregion
                }
            }
        }

        /// <summary>
        /// Select one entity by key
        /// </summary>
        /// <param name="key">Key (a dictionary containing key column name and its value)</param>
        /// <returns>An entity</returns>
        public override BaseEntity SelectOne(Dictionary<string, object> key)
        {
            #region Validate key
            if (key == null)
                throw new ArgumentNullException("key");
            if (!key.ContainsKey("RoleName"))
                throw new ArgumentNullException("RoleName");
            #endregion

            using (var cmd = Connection.CreateCommand())
            {
                cmd.CommandText = @"
                    SELECT TOP 1 this.[RoleName] AS [RoleName]
                    FROM [dbo].[Roles] AS this
                    WHERE ([RoleName] = @RoleName);
                    ";

                cmd.Parameters.AddWithValue("@RoleName", (System.String)key["RoleName"]);

                var tbl = new DataTable();
                using (var reader = cmd.ExecuteReader())
                    tbl.Load(reader);

                if (tbl.Rows.Count == 0)
                    return null;

                var entity = new Role();
                entity.FromDataRow(tbl.Rows[0]);

                #region Load User
                cmd.Parameters.Clear();
                cmd.CommandText = @"
                    SELECT child.[UserName] AS [UserName], child.[Email] AS [Email], child.[FirstName] AS [FirstName], child.[LastName] AS [LastName], child.[BirthDate] AS [BirthDate]
                    FROM [dbo].[Users] AS child
                    RIGHT JOIN [dbo].[UserInRoles] AS parent
                        ON (parent.[UserName] = child.[UserName])
                    WHERE (parent.[RoleName] = @RoleName);
                    ";

                cmd.Parameters.AddWithValue("@RoleName", entity.RoleName);

                var userTbl = new DataTable();
                using (var reader = cmd.ExecuteReader())
                    userTbl.Load(reader);

                if (userTbl.Rows.Count > 0)
                    foreach (DataRow row in userTbl.Rows)
                    {
                        var child = new User();
                        child.FromDataRow(row);
                        entity.Users.Add(child);
                    }
                #endregion

                #region Load Right
                cmd.Parameters.Clear();
                cmd.CommandText = @"
                    SELECT [RoleName] AS [RoleName], [FunctionName] AS [FunctionName], [IsEnabled] AS [IsEnabled]
                    FROM [dbo].[Rights]
                    WHERE ([RoleName] = @RoleName);
                    ";

                cmd.Parameters.AddWithValue("@RoleName", entity.RoleName);

                var rightTbl = new DataTable();
                using (var reader = cmd.ExecuteReader())
                    rightTbl.Load(reader);

                if (rightTbl.Rows.Count > 0)
                    foreach (DataRow row in rightTbl.Rows)
                    {
                        var child = new Right();
                        child.FromDataRow(row);
                        entity.Rights.Add(child);
                    }
                #endregion

                return entity;
            }
        }

        /// <summary>
        /// Select one entity by key
        /// </summary>
        /// <param name="roleName">RoleName</param>
        /// <returns>An entity</returns>
        public Role SelectOne(System.String roleName)
        {
            var key = new Dictionary<string, object>();
            key.Add("RoleName", roleName);
            return (Role)SelectOne(key);
        }

        /// <summary>
        /// Select all entities
        /// </summary>
        /// <param name="skip">Skip</param>
        /// <param name="take">Take</param>
        /// <returns>A collection of entities</returns>
        public override BaseEntityCollection<BaseEntity> SelectAll(int skip = 0, int take = 100)
        {
            using (var cmd = Connection.CreateCommand())
            {
                cmd.CommandText = @"
                    SELECT [RoleName] AS [RoleName]
                    FROM [dbo].[Roles]
                    ORDER BY [RoleName]
                    OFFSET " + skip + @" ROWS FETCH NEXT " + take + @" ROWS ONLY;
                    ";

                var coll = new BaseEntityCollection<BaseEntity>();
                var tbl = new DataTable();
                using (var reader = cmd.ExecuteReader())
                    tbl.Load(reader);

                if (tbl.Rows.Count > 0)
                    foreach (DataRow row in tbl.Rows)
                    {
                        var entity = new Role();
                        entity.FromDataRow(row);
                        coll.Add(entity);
                    }

                return coll;
            }
        }

        /// <summary>
        /// Count entities
        /// </summary>
        /// <returns>Num. of entities</returns>
        public override int Count()
        {
            using (var cmd = Connection.CreateCommand())
            {
                cmd.CommandText = @"SELECT COUNT(*) FROM [dbo].[Roles];";
                return (int)cmd.ExecuteScalar();
            }
        }
    }
    #endregion

    #region Right
    public partial class Right : BaseEntity
    {
        #region RoleName
        private System.String _roleName;
        /// <summary>
        /// Get or set RoleName
        /// </summary>
        [JsonProperty("roleName")]
        [EntityProperty]
        public System.String RoleName
        {
            get { return _roleName; }
            set { _roleName = value; }
        }
        #endregion

        #region FunctionName
        private System.String _functionName;
        /// <summary>
        /// Get or set FunctionName
        /// </summary>
        [JsonProperty("functionName")]
        [EntityProperty]
        public System.String FunctionName
        {
            get { return _functionName; }
            set { _functionName = value; }
        }
        #endregion

        #region IsEnabled
        private System.Boolean _isEnabled;
        /// <summary>
        /// Get or set IsEnabled
        /// </summary>
        [JsonProperty("isEnabled")]
        [EntityProperty]
        public System.Boolean IsEnabled
        {
            get { return _isEnabled; }
            set { _isEnabled = value; }
        }
        #endregion

        #region Function
        private Function _function;
        /// <summary>
        /// Get or set Function
        /// </summary>
        [JsonProperty("function")]
        [EntityProperty]
        public Function Function
        {
            get { return _function; }
            set { _function = value; }
        }
        #endregion

        #region Role
        private Role _role;
        /// <summary>
        /// Get or set Role
        /// </summary>
        [JsonProperty("role")]
        [EntityProperty]
        public Role Role
        {
            get { return _role; }
            set { _role = value; }
        }
        #endregion

        public Right()
        {
        }

        /// <summary>
        /// Create a new instance of repository
        /// </summary>
        /// <param name="conn">DB connection</param>
        /// <returns>Repository</returns>
        public override BaseRepository CreateRepository(SqlConnection conn)
        {
            return new RightRepository(conn);
        }

        /// <summary>
        /// Initialize entity from a data row
        /// </summary>
        /// <param name="row">Data row</param>
        public override void FromDataRow(DataRow row)
        {
            if (row == null)
                throw new ArgumentNullException("row");

            RoleName = (System.String)row["RoleName"];
            FunctionName = (System.String)row["FunctionName"];
            IsEnabled = (System.Boolean)row["IsEnabled"];
        }

        /// <summary>
        /// Initialize entity from another entity
        /// </summary>
        /// <param name="entity">Entity</param>
        public override void FromEntity(BaseEntity entity)
        {
            if (entity == null)
                throw new ArgumentNullException("entity");
            if (!(entity is Right))
                throw new ModelException(
                    "Right cannot be initialized from an entity other than a \"Right\""
                    );

            var typedEntity = (Right)entity;
            RoleName = typedEntity.RoleName;
            FunctionName = typedEntity.FunctionName;
            IsEnabled = typedEntity.IsEnabled;
            Function = typedEntity.Function;
            Role = typedEntity.Role;
        }

        /// <summary>
        /// Get entity key
        /// </summary>
        /// <returns>A dictionary that represents the key</returns>
        public override Dictionary<string, object> GetKey()
        {
            var key = new Dictionary<string, object>();
            key.Add("RoleName", RoleName);
            key.Add("FunctionName", FunctionName);
            return key;
        }

        /// <summary>
        /// Clone entity
        /// </summary>
        /// <returns>A clone</returns>
        public override BaseEntity Clone()
        {
            var clone = new Right();
            clone.RoleName = RoleName;
            clone.FunctionName = FunctionName;
            clone.IsEnabled = IsEnabled;
            clone.Function = (Function)Function?.Clone();
            clone.Role = (Role)Role?.Clone();
            return clone;
        }
    }

    public partial class RightRepository : BaseRepository
    {
        public RightRepository(SqlConnection conn)
            : base(conn, new List<Type>() { typeof(Function), typeof(Role), typeof(Right), typeof(User), typeof(UserInRole) })
        {
        }

        /// <summary>
        /// Insert or update entity
        /// </summary>
        /// <param name="entity">Entity</param>
        /// <param name="tr">Transaction</param>
        /// <param name="skipNestedObjects">
        ///     Flag specifying whether to skip or not InsertOrUpdate for nested objects (optional)
        /// </param>
        public override void InsertOrUpdate(BaseEntity entity, SqlTransaction tr, bool skipNestedObjects = false)
        {
            if (entity == null)
                throw new ArgumentNullException("entity");
            if (!(entity is Right))
                throw new ModelException(
                    "RightRepository " +
                    "cannot perform operations on \"" + entity.GetType().Name + "\""
                    );

            var typedEntity = (Right)entity;

            using (var cmd = Connection.CreateCommand())
            {
                cmd.Transaction = tr;

                if (!skipNestedObjects)
                {
                    foreach (var nestedEntity in typedEntity.Clone().Flatten().OrderBy(x => Hierarchy.IndexOf(x.GetType())))
                        nestedEntity.CreateRepository(Connection).InsertOrUpdate(nestedEntity, tr, true);
                }
                else
                {
                    #region Insert Right
                    cmd.CommandText = @"
                        IF NOT EXISTS (
                            SELECT TOP 1 * FROM [dbo].[Rights]
                            WHERE ([RoleName] = @RoleName AND [FunctionName] = @FunctionName)
                            )
                        BEGIN
                            INSERT INTO [dbo].[Rights] ([RoleName], [FunctionName], [IsEnabled]) VALUES
                                (@RoleName, @FunctionName, @IsEnabled);
                        END
                        ELSE
                        BEGIN
                            UPDATE [dbo].[Rights] SET
                                [IsEnabled] = @IsEnabled
                            WHERE ([RoleName] = @RoleName AND [FunctionName] = @FunctionName);
                        END
                        ";
                    cmd.Parameters.AddWithValue("@RoleName", typedEntity?.Role?.RoleName ?? typedEntity.RoleName);
                    cmd.Parameters.AddWithValue("@FunctionName", typedEntity?.Function?.FunctionName ?? typedEntity.FunctionName);
                    cmd.Parameters.AddWithValue("@IsEnabled", typedEntity.IsEnabled);
                    Debug.WriteLine("RightRepository.InsertOrUpdate: INSERT INTO [dbo].[Rights]; " +
                        "SkipNestedObjects=" + skipNestedObjects);
                    Debug.WriteLine("    " + "RoleName=" + typedEntity.RoleName + ";" + "FunctionName=" + typedEntity.FunctionName);
                    cmd.ExecuteNonQuery();
                    #endregion
                }

            }
        }

        /// <summary>
        /// Delete entity
        /// </summary>
        /// <param name="entity">Entity</param>
        /// <param name="tr">Transaction</param>
        /// <param name="skipNestedObjects">
        ///     Flag specifying whether to skip or not Delete for nested objects (optional)
        /// </param>
        public override void Delete(BaseEntity entity, SqlTransaction tr, bool skipNestedObjects = false)
        {
            if (entity == null)
                throw new ArgumentNullException("entity");
            if (!(entity is Right))
                throw new ModelException(
                    "RightRepository " +
                    "cannot perform operations on \"" + entity.GetType().Name + "\""
                    );

            var typedEntity = (Right)entity;

            using (var cmd = Connection.CreateCommand())
            {
                cmd.Transaction = tr;

                if (!skipNestedObjects)
                {
                    var tempFunction = typedEntity.Function;
                    typedEntity.Function = null;
                    var tempRole = typedEntity.Role;
                    typedEntity.Role = null;

                    foreach (var nestedEntity in typedEntity.Clone().Flatten().OrderBy(x => Hierarchy.IndexOf(x.GetType())))
                        nestedEntity.CreateRepository(Connection).Delete(nestedEntity, tr, true);

                    typedEntity.Function = tempFunction;
                    typedEntity.Role = tempRole;

                }
                else
                {
                    #region Delete Right
                    cmd.Parameters.Clear();
                    cmd.CommandText = @"
                        DELETE FROM [dbo].[Rights] WHERE
                            ([RoleName] = @RoleName AND [FunctionName] = @FunctionName);
                        ";
                    cmd.Parameters.AddWithValue("@RoleName", typedEntity?.Role?.RoleName ?? typedEntity.RoleName);
                    cmd.Parameters.AddWithValue("@FunctionName", typedEntity?.Function?.FunctionName ?? typedEntity.FunctionName);
                    Debug.WriteLine("RightRepository.Delete: DELETE FROM [dbo].[Rights]; " +
                        "SkipNestedObjects=" + skipNestedObjects);
                    Debug.WriteLine("    " + "RoleName=" + typedEntity.RoleName + "; " + "FunctionName=" + typedEntity.FunctionName);
                    cmd.ExecuteNonQuery();
                    #endregion
                }
            }
        }

        /// <summary>
        /// Select one entity by key
        /// </summary>
        /// <param name="key">Key (a dictionary containing key column name and its value)</param>
        /// <returns>An entity</returns>
        public override BaseEntity SelectOne(Dictionary<string, object> key)
        {
            #region Validate key
            if (key == null)
                throw new ArgumentNullException("key");
            if (!key.ContainsKey("RoleName"))
                throw new ArgumentNullException("RoleName");
            if (!key.ContainsKey("FunctionName"))
                throw new ArgumentNullException("FunctionName");
            #endregion

            using (var cmd = Connection.CreateCommand())
            {
                cmd.CommandText = @"
                    SELECT TOP 1 this.[RoleName] AS [RoleName], this.[FunctionName] AS [FunctionName], this.[IsEnabled] AS [IsEnabled]
                    FROM [dbo].[Rights] AS this
                    WHERE ([RoleName] = @RoleName AND [FunctionName] = @FunctionName);
                    ";

                cmd.Parameters.AddWithValue("@RoleName", (System.String)key["RoleName"]);
                cmd.Parameters.AddWithValue("@FunctionName", (System.String)key["FunctionName"]);

                var tbl = new DataTable();
                using (var reader = cmd.ExecuteReader())
                    tbl.Load(reader);

                if (tbl.Rows.Count == 0)
                    return null;

                var entity = new Right();
                entity.FromDataRow(tbl.Rows[0]);

                #region Load Function
                cmd.Parameters.Clear();
                cmd.CommandText = @"
                    SELECT [FunctionName] AS [FunctionName]
                    FROM [dbo].[Functions]
                    WHERE ([FunctionName] = @FunctionName);
                    ";

                cmd.Parameters.AddWithValue("@FunctionName", entity.FunctionName);

                var functionTbl = new DataTable();
                using (var reader = cmd.ExecuteReader())
                    functionTbl.Load(reader);

                if (functionTbl.Rows.Count > 0)
                    foreach (DataRow row in functionTbl.Rows)
                    {
                        var child = new Function();
                        child.FromDataRow(row);
                        entity.Function = child;
                    }
                #endregion

                #region Load Role
                cmd.Parameters.Clear();
                cmd.CommandText = @"
                    SELECT [RoleName] AS [RoleName]
                    FROM [dbo].[Roles]
                    WHERE ([RoleName] = @RoleName);
                    ";

                cmd.Parameters.AddWithValue("@RoleName", entity.RoleName);

                var roleTbl = new DataTable();
                using (var reader = cmd.ExecuteReader())
                    roleTbl.Load(reader);

                if (roleTbl.Rows.Count > 0)
                    foreach (DataRow row in roleTbl.Rows)
                    {
                        var child = new Role();
                        child.FromDataRow(row);
                        entity.Role = child;
                    }
                #endregion

                return entity;
            }
        }

        /// <summary>
        /// Select one entity by key
        /// </summary>
        /// <param name="roleName">RoleName</param>
        /// <param name="functionName">FunctionName</param>
        /// <returns>An entity</returns>
        public Right SelectOne(System.String roleName, System.String functionName)
        {
            var key = new Dictionary<string, object>();
            key.Add("RoleName", roleName);
            key.Add("FunctionName", functionName);
            return (Right)SelectOne(key);
        }

        /// <summary>
        /// Select all entities
        /// </summary>
        /// <param name="skip">Skip</param>
        /// <param name="take">Take</param>
        /// <returns>A collection of entities</returns>
        public override BaseEntityCollection<BaseEntity> SelectAll(int skip = 0, int take = 100)
        {
            using (var cmd = Connection.CreateCommand())
            {
                cmd.CommandText = @"
                    SELECT [RoleName] AS [RoleName], [FunctionName] AS [FunctionName], [IsEnabled] AS [IsEnabled]
                    FROM [dbo].[Rights]
                    ORDER BY [RoleName], [FunctionName]
                    OFFSET " + skip + @" ROWS FETCH NEXT " + take + @" ROWS ONLY;
                    ";

                var coll = new BaseEntityCollection<BaseEntity>();
                var tbl = new DataTable();
                using (var reader = cmd.ExecuteReader())
                    tbl.Load(reader);

                if (tbl.Rows.Count > 0)
                    foreach (DataRow row in tbl.Rows)
                    {
                        var entity = new Right();
                        entity.FromDataRow(row);
                        coll.Add(entity);
                    }

                return coll;
            }
        }

        /// <summary>
        /// Count entities
        /// </summary>
        /// <returns>Num. of entities</returns>
        public override int Count()
        {
            using (var cmd = Connection.CreateCommand())
            {
                cmd.CommandText = @"SELECT COUNT(*) FROM [dbo].[Rights];";
                return (int)cmd.ExecuteScalar();
            }
        }
    }
    #endregion

    #region Tab
    public partial class Tab : BaseEntity
    {
        #region Cod
        private System.String _cod;
        /// <summary>
        /// Get or set Cod
        /// </summary>
        [JsonProperty("cod")]
        [EntityProperty]
        public System.String Cod
        {
            get { return _cod; }
            set { _cod = value; }
        }
        #endregion

        #region Description
        private System.String _description;
        /// <summary>
        /// Get or set Description
        /// </summary>
        [JsonProperty("description")]
        [EntityProperty]
        public System.String Description
        {
            get { return _description; }
            set { _description = value; }
        }
        #endregion

        #region Rows
        private BaseEntityCollection<TabRow> _rows;
        /// <summary>
        /// Get or set Rows
        /// </summary>
        [JsonProperty("rows")]
        [EntityProperty]
        public BaseEntityCollection<TabRow> Rows
        {
            get { return _rows; }
            internal set { _rows = value; }
        }
        #endregion

        public Tab()
        {
            _rows = new BaseEntityCollection<TabRow>();
            _rows.CollectionEntityFlatten +=
                (TabRow entity) =>
                {
                    entity.CodTab = Cod;
                };
        }

        /// <summary>
        /// Create a new instance of repository
        /// </summary>
        /// <param name="conn">DB connection</param>
        /// <returns>Repository</returns>
        public override BaseRepository CreateRepository(SqlConnection conn)
        {
            return new TabRepository(conn);
        }

        /// <summary>
        /// Initialize entity from a data row
        /// </summary>
        /// <param name="row">Data row</param>
        public override void FromDataRow(DataRow row)
        {
            if (row == null)
                throw new ArgumentNullException("row");

            Cod = (System.String)row["Cod"];
            Description = (System.String)row["Description"];
        }

        /// <summary>
        /// Initialize entity from another entity
        /// </summary>
        /// <param name="entity">Entity</param>
        public override void FromEntity(BaseEntity entity)
        {
            if (entity == null)
                throw new ArgumentNullException("entity");
            if (!(entity is Tab))
                throw new ModelException(
                    "Tab cannot be initialized from an entity other than a \"Tab\""
                    );

            var typedEntity = (Tab)entity;
            Cod = typedEntity.Cod;
            Description = typedEntity.Description;
            Rows = typedEntity.Rows;
        }

        /// <summary>
        /// Get entity key
        /// </summary>
        /// <returns>A dictionary that represents the key</returns>
        public override Dictionary<string, object> GetKey()
        {
            var key = new Dictionary<string, object>();
            key.Add("Cod", Cod);
            return key;
        }

        /// <summary>
        /// Clone entity
        /// </summary>
        /// <returns>A clone</returns>
        public override BaseEntity Clone()
        {
            var clone = new Tab();
            clone.Cod = Cod;
            clone.Description = Description;
            clone.Rows = (BaseEntityCollection<TabRow>)Rows?.Clone();
            return clone;
        }
    }

    public partial class TabRepository : BaseRepository
    {
        public TabRepository(SqlConnection conn)
            : base(conn, new List<Type>() { typeof(Tab), typeof(TabRow), typeof(TabRowDetail) })
        {
        }

        /// <summary>
        /// Insert or update entity
        /// </summary>
        /// <param name="entity">Entity</param>
        /// <param name="tr">Transaction</param>
        /// <param name="skipNestedObjects">
        ///     Flag specifying whether to skip or not InsertOrUpdate for nested objects (optional)
        /// </param>
        public override void InsertOrUpdate(BaseEntity entity, SqlTransaction tr, bool skipNestedObjects = false)
        {
            if (entity == null)
                throw new ArgumentNullException("entity");
            if (!(entity is Tab))
                throw new ModelException(
                    "TabRepository " +
                    "cannot perform operations on \"" + entity.GetType().Name + "\""
                    );

            var typedEntity = (Tab)entity;

            #region Validate fields
            if (typedEntity.Cod == null)
                throw new ArgumentNullException("entity.Cod");
            if (typedEntity.Description == null)
                throw new ArgumentNullException("entity.Description");
            #endregion

            using (var cmd = Connection.CreateCommand())
            {
                cmd.Transaction = tr;

                if (!skipNestedObjects)
                {
                    foreach (var nestedEntity in typedEntity.Clone().Flatten().OrderBy(x => Hierarchy.IndexOf(x.GetType())))
                        nestedEntity.CreateRepository(Connection).InsertOrUpdate(nestedEntity, tr, true);
                }
                else
                {
                    #region Insert Tab
                    cmd.CommandText = @"
                        IF NOT EXISTS (
                            SELECT TOP 1 * FROM [dbo].[Tabs]
                            WHERE ([Cod] = @Cod)
                            )
                        BEGIN
                            INSERT INTO [dbo].[Tabs] ([Cod], [Description]) VALUES
                                (@Cod, @Description);
                        END
                        ELSE
                        BEGIN
                            UPDATE [dbo].[Tabs] SET
                                [Description] = @Description
                            WHERE ([Cod] = @Cod);
                        END
                        ";
                    cmd.Parameters.AddWithValue("@Cod", typedEntity.Cod);
                    cmd.Parameters.AddWithValue("@Description", typedEntity.Description);
                    Debug.WriteLine("TabRepository.InsertOrUpdate: INSERT INTO [dbo].[Tabs]; " +
                        "SkipNestedObjects=" + skipNestedObjects);
                    Debug.WriteLine("    " + "Cod=" + typedEntity.Cod);
                    cmd.ExecuteNonQuery();
                    #endregion
                }

            }
        }

        /// <summary>
        /// Delete entity
        /// </summary>
        /// <param name="entity">Entity</param>
        /// <param name="tr">Transaction</param>
        /// <param name="skipNestedObjects">
        ///     Flag specifying whether to skip or not Delete for nested objects (optional)
        /// </param>
        public override void Delete(BaseEntity entity, SqlTransaction tr, bool skipNestedObjects = false)
        {
            if (entity == null)
                throw new ArgumentNullException("entity");
            if (!(entity is Tab))
                throw new ModelException(
                    "TabRepository " +
                    "cannot perform operations on \"" + entity.GetType().Name + "\""
                    );

            var typedEntity = (Tab)entity;

            using (var cmd = Connection.CreateCommand())
            {
                cmd.Transaction = tr;

                #region Delete TabRow
                cmd.Parameters.Clear();
                cmd.CommandText = @"
                    DELETE FROM [dbo].[TabRows] WHERE
                        ([CodTab] = @Cod);
                    ";
                cmd.Parameters.AddWithValue("@Cod", typedEntity.Cod);
                Debug.WriteLine("TabRepository.Delete: DELETE FROM [dbo].[TabRows]; " +
                    "SkipNestedObjects=" + skipNestedObjects);
                Debug.WriteLine("    " + "Cod=" + typedEntity.Cod);
                cmd.ExecuteNonQuery();
                #endregion

                if (!skipNestedObjects)
                {
                    foreach (var nestedEntity in typedEntity.Clone().Flatten().OrderBy(x => Hierarchy.IndexOf(x.GetType())))
                        nestedEntity.CreateRepository(Connection).Delete(nestedEntity, tr, true);

                }
                else
                {
                    #region Delete Tab
                    cmd.Parameters.Clear();
                    cmd.CommandText = @"
                        DELETE FROM [dbo].[Tabs] WHERE
                            ([Cod] = @Cod);
                        ";
                    cmd.Parameters.AddWithValue("@Cod", typedEntity.Cod);
                    Debug.WriteLine("TabRepository.Delete: DELETE FROM [dbo].[Tabs]; " +
                        "SkipNestedObjects=" + skipNestedObjects);
                    Debug.WriteLine("    " + "Cod=" + typedEntity.Cod);
                    cmd.ExecuteNonQuery();
                    #endregion
                }
            }
        }

        /// <summary>
        /// Select one entity by key
        /// </summary>
        /// <param name="key">Key (a dictionary containing key column name and its value)</param>
        /// <returns>An entity</returns>
        public override BaseEntity SelectOne(Dictionary<string, object> key)
        {
            #region Validate key
            if (key == null)
                throw new ArgumentNullException("key");
            if (!key.ContainsKey("Cod"))
                throw new ArgumentNullException("Cod");
            #endregion

            using (var cmd = Connection.CreateCommand())
            {
                cmd.CommandText = @"
                    SELECT TOP 1 this.[Cod] AS [Cod], this.[Description] AS [Description]
                    FROM [dbo].[Tabs] AS this
                    WHERE ([Cod] = @Cod);
                    ";

                cmd.Parameters.AddWithValue("@Cod", (System.String)key["Cod"]);

                var tbl = new DataTable();
                using (var reader = cmd.ExecuteReader())
                    tbl.Load(reader);

                if (tbl.Rows.Count == 0)
                    return null;

                var entity = new Tab();
                entity.FromDataRow(tbl.Rows[0]);

                #region Load TabRow
                cmd.Parameters.Clear();
                cmd.CommandText = @"
                    SELECT [CodTab] AS [CodTab], [Cod] AS [Cod], [Description] AS [Description]
                    FROM [dbo].[TabRows]
                    WHERE ([CodTab] = @Cod);
                    ";

                cmd.Parameters.AddWithValue("@Cod", entity.Cod);

                var tabRowTbl = new DataTable();
                using (var reader = cmd.ExecuteReader())
                    tabRowTbl.Load(reader);

                if (tabRowTbl.Rows.Count > 0)
                    foreach (DataRow row in tabRowTbl.Rows)
                    {
                        var child = new TabRow();
                        child.FromDataRow(row);
                        entity.Rows.Add(child);
                    }
                #endregion

                return entity;
            }
        }

        /// <summary>
        /// Select one entity by key
        /// </summary>
        /// <param name="cod">Cod</param>
        /// <returns>An entity</returns>
        public Tab SelectOne(System.String cod)
        {
            var key = new Dictionary<string, object>();
            key.Add("Cod", cod);
            return (Tab)SelectOne(key);
        }

        /// <summary>
        /// Select all entities
        /// </summary>
        /// <param name="skip">Skip</param>
        /// <param name="take">Take</param>
        /// <returns>A collection of entities</returns>
        public override BaseEntityCollection<BaseEntity> SelectAll(int skip = 0, int take = 100)
        {
            using (var cmd = Connection.CreateCommand())
            {
                cmd.CommandText = @"
                    SELECT [Cod] AS [Cod], [Description] AS [Description]
                    FROM [dbo].[Tabs]
                    ORDER BY [Cod]
                    OFFSET " + skip + @" ROWS FETCH NEXT " + take + @" ROWS ONLY;
                    ";

                var coll = new BaseEntityCollection<BaseEntity>();
                var tbl = new DataTable();
                using (var reader = cmd.ExecuteReader())
                    tbl.Load(reader);

                if (tbl.Rows.Count > 0)
                    foreach (DataRow row in tbl.Rows)
                    {
                        var entity = new Tab();
                        entity.FromDataRow(row);
                        coll.Add(entity);
                    }

                return coll;
            }
        }

        /// <summary>
        /// Count entities
        /// </summary>
        /// <returns>Num. of entities</returns>
        public override int Count()
        {
            using (var cmd = Connection.CreateCommand())
            {
                cmd.CommandText = @"SELECT COUNT(*) FROM [dbo].[Tabs];";
                return (int)cmd.ExecuteScalar();
            }
        }
    }
    #endregion

    #region TabRow
    public partial class TabRow : BaseEntity
    {
        #region CodTab
        private System.String _codTab;
        /// <summary>
        /// Get or set CodTab
        /// </summary>
        [JsonProperty("codTab")]
        [EntityProperty]
        public System.String CodTab
        {
            get { return _codTab; }
            set { _codTab = value; }
        }
        #endregion

        #region Cod
        private System.String _cod;
        /// <summary>
        /// Get or set Cod
        /// </summary>
        [JsonProperty("cod")]
        [EntityProperty]
        public System.String Cod
        {
            get { return _cod; }
            set { _cod = value; }
        }
        #endregion

        #region Description
        private System.String _description;
        /// <summary>
        /// Get or set Description
        /// </summary>
        [JsonProperty("description")]
        [EntityProperty]
        public System.String Description
        {
            get { return _description; }
            set { _description = value; }
        }
        #endregion

        #region Tab
        private Tab _tab;
        /// <summary>
        /// Get or set Tab
        /// </summary>
        [JsonProperty("tab")]
        [EntityProperty]
        public Tab Tab
        {
            get { return _tab; }
            set { _tab = value; }
        }
        #endregion

        #region Detail
        private TabRowDetail _detail;
        /// <summary>
        /// Get or set Detail
        /// </summary>
        [JsonProperty("detail")]
        [EntityProperty]
        public TabRowDetail Detail
        {
            get { return _detail; }
            set { _detail = value; }
        }
        #endregion

        public TabRow()
        {
        }

        /// <summary>
        /// Create a new instance of repository
        /// </summary>
        /// <param name="conn">DB connection</param>
        /// <returns>Repository</returns>
        public override BaseRepository CreateRepository(SqlConnection conn)
        {
            return new TabRowRepository(conn);
        }

        /// <summary>
        /// Initialize entity from a data row
        /// </summary>
        /// <param name="row">Data row</param>
        public override void FromDataRow(DataRow row)
        {
            if (row == null)
                throw new ArgumentNullException("row");

            CodTab = (System.String)row["CodTab"];
            Cod = (System.String)row["Cod"];
            Description = (System.String)row["Description"];
        }

        /// <summary>
        /// Initialize entity from another entity
        /// </summary>
        /// <param name="entity">Entity</param>
        public override void FromEntity(BaseEntity entity)
        {
            if (entity == null)
                throw new ArgumentNullException("entity");
            if (!(entity is TabRow))
                throw new ModelException(
                    "TabRow cannot be initialized from an entity other than a \"TabRow\""
                    );

            var typedEntity = (TabRow)entity;
            CodTab = typedEntity.CodTab;
            Cod = typedEntity.Cod;
            Description = typedEntity.Description;
            Tab = typedEntity.Tab;
            Detail = typedEntity.Detail;
        }

        /// <summary>
        /// Get entity key
        /// </summary>
        /// <returns>A dictionary that represents the key</returns>
        public override Dictionary<string, object> GetKey()
        {
            var key = new Dictionary<string, object>();
            key.Add("CodTab", CodTab);
            key.Add("Cod", Cod);
            return key;
        }

        /// <summary>
        /// Clone entity
        /// </summary>
        /// <returns>A clone</returns>
        public override BaseEntity Clone()
        {
            var clone = new TabRow();
            clone.CodTab = CodTab;
            clone.Cod = Cod;
            clone.Description = Description;
            clone.Tab = (Tab)Tab?.Clone();
            clone.Detail = (TabRowDetail)Detail?.Clone();
            return clone;
        }
    }

    public partial class TabRowRepository : BaseRepository
    {
        public TabRowRepository(SqlConnection conn)
            : base(conn, new List<Type>() { typeof(Tab), typeof(TabRow), typeof(TabRowDetail) })
        {
        }

        /// <summary>
        /// Insert or update entity
        /// </summary>
        /// <param name="entity">Entity</param>
        /// <param name="tr">Transaction</param>
        /// <param name="skipNestedObjects">
        ///     Flag specifying whether to skip or not InsertOrUpdate for nested objects (optional)
        /// </param>
        public override void InsertOrUpdate(BaseEntity entity, SqlTransaction tr, bool skipNestedObjects = false)
        {
            if (entity == null)
                throw new ArgumentNullException("entity");
            if (!(entity is TabRow))
                throw new ModelException(
                    "TabRowRepository " +
                    "cannot perform operations on \"" + entity.GetType().Name + "\""
                    );

            var typedEntity = (TabRow)entity;

            #region Validate fields
            if (typedEntity.Description == null)
                throw new ArgumentNullException("entity.Description");
            #endregion

            using (var cmd = Connection.CreateCommand())
            {
                cmd.Transaction = tr;

                if (!skipNestedObjects)
                {
                    foreach (var nestedEntity in typedEntity.Clone().Flatten().OrderBy(x => Hierarchy.IndexOf(x.GetType())))
                        nestedEntity.CreateRepository(Connection).InsertOrUpdate(nestedEntity, tr, true);
                }
                else
                {
                    #region Insert TabRow
                    cmd.CommandText = @"
                        IF NOT EXISTS (
                            SELECT TOP 1 * FROM [dbo].[TabRows]
                            WHERE ([CodTab] = @CodTab AND [Cod] = @Cod)
                            )
                        BEGIN
                            INSERT INTO [dbo].[TabRows] ([CodTab], [Cod], [Description]) VALUES
                                (@CodTab, @Cod, @Description);
                        END
                        ELSE
                        BEGIN
                            UPDATE [dbo].[TabRows] SET
                                [Description] = @Description
                            WHERE ([CodTab] = @CodTab AND [Cod] = @Cod);
                        END
                        ";
                    cmd.Parameters.AddWithValue("@CodTab", typedEntity?.Detail?.CodTab ?? typedEntity.CodTab);
                    cmd.Parameters.AddWithValue("@Cod", typedEntity?.Detail?.Cod ?? typedEntity.Cod);
                    cmd.Parameters.AddWithValue("@Description", typedEntity.Description);
                    Debug.WriteLine("TabRowRepository.InsertOrUpdate: INSERT INTO [dbo].[TabRows]; " +
                        "SkipNestedObjects=" + skipNestedObjects);
                    Debug.WriteLine("    " + "CodTab=" + typedEntity.CodTab + ";" + "Cod=" + typedEntity.Cod);
                    cmd.ExecuteNonQuery();
                    #endregion
                }

            }
        }

        /// <summary>
        /// Delete entity
        /// </summary>
        /// <param name="entity">Entity</param>
        /// <param name="tr">Transaction</param>
        /// <param name="skipNestedObjects">
        ///     Flag specifying whether to skip or not Delete for nested objects (optional)
        /// </param>
        public override void Delete(BaseEntity entity, SqlTransaction tr, bool skipNestedObjects = false)
        {
            if (entity == null)
                throw new ArgumentNullException("entity");
            if (!(entity is TabRow))
                throw new ModelException(
                    "TabRowRepository " +
                    "cannot perform operations on \"" + entity.GetType().Name + "\""
                    );

            var typedEntity = (TabRow)entity;

            using (var cmd = Connection.CreateCommand())
            {
                cmd.Transaction = tr;

                if (!skipNestedObjects)
                {
                    var tempTab = typedEntity.Tab;
                    typedEntity.Tab = null;

                    foreach (var nestedEntity in typedEntity.Clone().Flatten().OrderBy(x => Hierarchy.IndexOf(x.GetType())))
                        nestedEntity.CreateRepository(Connection).Delete(nestedEntity, tr, true);

                    typedEntity.Tab = tempTab;

                }
                else
                {
                    #region Delete TabRow
                    cmd.Parameters.Clear();
                    cmd.CommandText = @"
                        DELETE FROM [dbo].[TabRows] WHERE
                            ([CodTab] = @CodTab AND [Cod] = @Cod);
                        ";
                    cmd.Parameters.AddWithValue("@CodTab", typedEntity?.Detail?.CodTab ?? typedEntity.CodTab);
                    cmd.Parameters.AddWithValue("@Cod", typedEntity?.Detail?.Cod ?? typedEntity.Cod);
                    Debug.WriteLine("TabRowRepository.Delete: DELETE FROM [dbo].[TabRows]; " +
                        "SkipNestedObjects=" + skipNestedObjects);
                    Debug.WriteLine("    " + "CodTab=" + typedEntity.CodTab + "; " + "Cod=" + typedEntity.Cod);
                    cmd.ExecuteNonQuery();
                    #endregion
                }
            }
        }

        /// <summary>
        /// Select one entity by key
        /// </summary>
        /// <param name="key">Key (a dictionary containing key column name and its value)</param>
        /// <returns>An entity</returns>
        public override BaseEntity SelectOne(Dictionary<string, object> key)
        {
            #region Validate key
            if (key == null)
                throw new ArgumentNullException("key");
            if (!key.ContainsKey("CodTab"))
                throw new ArgumentNullException("CodTab");
            if (!key.ContainsKey("Cod"))
                throw new ArgumentNullException("Cod");
            #endregion

            using (var cmd = Connection.CreateCommand())
            {
                cmd.CommandText = @"
                    SELECT TOP 1 this.[CodTab] AS [CodTab], this.[Cod] AS [Cod], this.[Description] AS [Description]
                    FROM [dbo].[TabRows] AS this
                    WHERE ([CodTab] = @CodTab AND [Cod] = @Cod);
                    ";

                cmd.Parameters.AddWithValue("@CodTab", (System.String)key["CodTab"]);
                cmd.Parameters.AddWithValue("@Cod", (System.String)key["Cod"]);

                var tbl = new DataTable();
                using (var reader = cmd.ExecuteReader())
                    tbl.Load(reader);

                if (tbl.Rows.Count == 0)
                    return null;

                var entity = new TabRow();
                entity.FromDataRow(tbl.Rows[0]);

                #region Load Tab
                cmd.Parameters.Clear();
                cmd.CommandText = @"
                    SELECT [Cod] AS [Cod], [Description] AS [Description]
                    FROM [dbo].[Tabs]
                    WHERE ([CodTab] = @Cod);
                    ";

                cmd.Parameters.AddWithValue("@Cod", entity.Cod);

                var tabTbl = new DataTable();
                using (var reader = cmd.ExecuteReader())
                    tabTbl.Load(reader);

                if (tabTbl.Rows.Count > 0)
                    foreach (DataRow row in tabTbl.Rows)
                    {
                        var child = new Tab();
                        child.FromDataRow(row);
                        entity.Tab = child;
                    }
                #endregion

                #region Load TabRowDetail
                cmd.Parameters.Clear();
                cmd.CommandText = @"
                    SELECT [CodTab] AS [CodTab], [Cod] AS [Cod], [Pos] AS [Pos], [ExtraInfo] AS [ExtraInfo]
                    FROM [dbo].[TabRowDetails]
                    WHERE ([CodTab] = @CodTab AND [Cod] = @Cod);
                    ";

                cmd.Parameters.AddWithValue("@CodTab", entity.CodTab);
                cmd.Parameters.AddWithValue("@Cod", entity.Cod);

                var tabRowDetailTbl = new DataTable();
                using (var reader = cmd.ExecuteReader())
                    tabRowDetailTbl.Load(reader);

                if (tabRowDetailTbl.Rows.Count > 0)
                    foreach (DataRow row in tabRowDetailTbl.Rows)
                    {
                        var child = new TabRowDetail();
                        child.FromDataRow(row);
                        entity.Detail = child;
                    }
                #endregion

                return entity;
            }
        }

        /// <summary>
        /// Select one entity by key
        /// </summary>
        /// <param name="codTab">CodTab</param>
        /// <param name="cod">Cod</param>
        /// <returns>An entity</returns>
        public TabRow SelectOne(System.String codTab, System.String cod)
        {
            var key = new Dictionary<string, object>();
            key.Add("CodTab", codTab);
            key.Add("Cod", cod);
            return (TabRow)SelectOne(key);
        }

        /// <summary>
        /// Select all entities
        /// </summary>
        /// <param name="skip">Skip</param>
        /// <param name="take">Take</param>
        /// <returns>A collection of entities</returns>
        public override BaseEntityCollection<BaseEntity> SelectAll(int skip = 0, int take = 100)
        {
            using (var cmd = Connection.CreateCommand())
            {
                cmd.CommandText = @"
                    SELECT [CodTab] AS [CodTab], [Cod] AS [Cod], [Description] AS [Description]
                    FROM [dbo].[TabRows]
                    ORDER BY [CodTab], [Cod]
                    OFFSET " + skip + @" ROWS FETCH NEXT " + take + @" ROWS ONLY;
                    ";

                var coll = new BaseEntityCollection<BaseEntity>();
                var tbl = new DataTable();
                using (var reader = cmd.ExecuteReader())
                    tbl.Load(reader);

                if (tbl.Rows.Count > 0)
                    foreach (DataRow row in tbl.Rows)
                    {
                        var entity = new TabRow();
                        entity.FromDataRow(row);
                        coll.Add(entity);
                    }

                return coll;
            }
        }

        /// <summary>
        /// Count entities
        /// </summary>
        /// <returns>Num. of entities</returns>
        public override int Count()
        {
            using (var cmd = Connection.CreateCommand())
            {
                cmd.CommandText = @"SELECT COUNT(*) FROM [dbo].[TabRows];";
                return (int)cmd.ExecuteScalar();
            }
        }
    }
    #endregion

    #region TabRowDetail
    public partial class TabRowDetail : BaseEntity
    {
        #region CodTab
        private System.String _codTab;
        /// <summary>
        /// Get or set CodTab
        /// </summary>
        [JsonProperty("codTab")]
        [EntityProperty]
        public System.String CodTab
        {
            get { return _codTab; }
            set { _codTab = value; }
        }
        #endregion

        #region Cod
        private System.String _cod;
        /// <summary>
        /// Get or set Cod
        /// </summary>
        [JsonProperty("cod")]
        [EntityProperty]
        public System.String Cod
        {
            get { return _cod; }
            set { _cod = value; }
        }
        #endregion

        #region Pos
        private System.Nullable<System.Int32> _pos;
        /// <summary>
        /// Get or set Pos
        /// </summary>
        [JsonProperty("pos")]
        [EntityProperty]
        public System.Nullable<System.Int32> Pos
        {
            get { return _pos; }
            set { _pos = value; }
        }
        #endregion

        #region ExtraInfo
        private System.String _extraInfo;
        /// <summary>
        /// Get or set ExtraInfo
        /// </summary>
        [JsonProperty("extraInfo")]
        [EntityProperty]
        public System.String ExtraInfo
        {
            get { return _extraInfo; }
            set { _extraInfo = value; }
        }
        #endregion

        #region TabRow
        private TabRow _tabRow;
        /// <summary>
        /// Get or set TabRow
        /// </summary>
        [JsonProperty("tabRow")]
        [EntityProperty]
        public TabRow TabRow
        {
            get { return _tabRow; }
            set { _tabRow = value; }
        }
        #endregion

        public TabRowDetail()
        {
        }

        /// <summary>
        /// Create a new instance of repository
        /// </summary>
        /// <param name="conn">DB connection</param>
        /// <returns>Repository</returns>
        public override BaseRepository CreateRepository(SqlConnection conn)
        {
            return new TabRowDetailRepository(conn);
        }

        /// <summary>
        /// Initialize entity from a data row
        /// </summary>
        /// <param name="row">Data row</param>
        public override void FromDataRow(DataRow row)
        {
            if (row == null)
                throw new ArgumentNullException("row");

            CodTab = (System.String)row["CodTab"];
            Cod = (System.String)row["Cod"];
            Pos = !row.IsNull("Pos") ? (System.Nullable<System.Int32>)row["Pos"] : (System.Nullable<System.Int32>)null;
            ExtraInfo = !row.IsNull("ExtraInfo") ? (System.String)row["ExtraInfo"] : (System.String)null;
        }

        /// <summary>
        /// Initialize entity from another entity
        /// </summary>
        /// <param name="entity">Entity</param>
        public override void FromEntity(BaseEntity entity)
        {
            if (entity == null)
                throw new ArgumentNullException("entity");
            if (!(entity is TabRowDetail))
                throw new ModelException(
                    "TabRowDetail cannot be initialized from an entity other than a \"TabRowDetail\""
                    );

            var typedEntity = (TabRowDetail)entity;
            CodTab = typedEntity.CodTab;
            Cod = typedEntity.Cod;
            Pos = typedEntity.Pos;
            ExtraInfo = typedEntity.ExtraInfo;
            TabRow = typedEntity.TabRow;
        }

        /// <summary>
        /// Get entity key
        /// </summary>
        /// <returns>A dictionary that represents the key</returns>
        public override Dictionary<string, object> GetKey()
        {
            var key = new Dictionary<string, object>();
            key.Add("CodTab", CodTab);
            key.Add("Cod", Cod);
            return key;
        }

        /// <summary>
        /// Clone entity
        /// </summary>
        /// <returns>A clone</returns>
        public override BaseEntity Clone()
        {
            var clone = new TabRowDetail();
            clone.CodTab = CodTab;
            clone.Cod = Cod;
            clone.Pos = Pos;
            clone.ExtraInfo = ExtraInfo;
            clone.TabRow = (TabRow)TabRow?.Clone();
            return clone;
        }
    }

    public partial class TabRowDetailRepository : BaseRepository
    {
        public TabRowDetailRepository(SqlConnection conn)
            : base(conn, new List<Type>() { typeof(TabRowDetail), typeof(Tab), typeof(TabRow) })
        {
        }

        /// <summary>
        /// Insert or update entity
        /// </summary>
        /// <param name="entity">Entity</param>
        /// <param name="tr">Transaction</param>
        /// <param name="skipNestedObjects">
        ///     Flag specifying whether to skip or not InsertOrUpdate for nested objects (optional)
        /// </param>
        public override void InsertOrUpdate(BaseEntity entity, SqlTransaction tr, bool skipNestedObjects = false)
        {
            if (entity == null)
                throw new ArgumentNullException("entity");
            if (!(entity is TabRowDetail))
                throw new ModelException(
                    "TabRowDetailRepository " +
                    "cannot perform operations on \"" + entity.GetType().Name + "\""
                    );

            var typedEntity = (TabRowDetail)entity;

            using (var cmd = Connection.CreateCommand())
            {
                cmd.Transaction = tr;

                if (!skipNestedObjects)
                {
                    foreach (var nestedEntity in typedEntity.Clone().Flatten().OrderBy(x => Hierarchy.IndexOf(x.GetType())))
                        nestedEntity.CreateRepository(Connection).InsertOrUpdate(nestedEntity, tr, true);
                }
                else
                {
                    #region Insert TabRowDetail
                    cmd.CommandText = @"
                        IF NOT EXISTS (
                            SELECT TOP 1 * FROM [dbo].[TabRowDetails]
                            WHERE ([CodTab] = @CodTab AND [Cod] = @Cod)
                            )
                        BEGIN
                            INSERT INTO [dbo].[TabRowDetails] ([CodTab], [Cod], [Pos], [ExtraInfo]) VALUES
                                (@CodTab, @Cod, @Pos, @ExtraInfo);
                        END
                        ELSE
                        BEGIN
                            UPDATE [dbo].[TabRowDetails] SET
                                [Pos] = @Pos, [ExtraInfo] = @ExtraInfo
                            WHERE ([CodTab] = @CodTab AND [Cod] = @Cod);
                        END
                        ";
                    cmd.Parameters.AddWithValue("@CodTab", typedEntity?.TabRow?.CodTab ?? typedEntity.CodTab);
                    cmd.Parameters.AddWithValue("@Cod", typedEntity?.TabRow?.Cod ?? typedEntity.Cod);
                    cmd.Parameters.AddWithValue("@Pos", typedEntity.Pos ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@ExtraInfo", typedEntity.ExtraInfo ?? (object)DBNull.Value);
                    Debug.WriteLine("TabRowDetailRepository.InsertOrUpdate: INSERT INTO [dbo].[TabRowDetails]; " +
                        "SkipNestedObjects=" + skipNestedObjects);
                    Debug.WriteLine("    " + "CodTab=" + typedEntity.CodTab + ";" + "Cod=" + typedEntity.Cod);
                    cmd.ExecuteNonQuery();
                    #endregion
                }

            }
        }

        /// <summary>
        /// Delete entity
        /// </summary>
        /// <param name="entity">Entity</param>
        /// <param name="tr">Transaction</param>
        /// <param name="skipNestedObjects">
        ///     Flag specifying whether to skip or not Delete for nested objects (optional)
        /// </param>
        public override void Delete(BaseEntity entity, SqlTransaction tr, bool skipNestedObjects = false)
        {
            if (entity == null)
                throw new ArgumentNullException("entity");
            if (!(entity is TabRowDetail))
                throw new ModelException(
                    "TabRowDetailRepository " +
                    "cannot perform operations on \"" + entity.GetType().Name + "\""
                    );

            var typedEntity = (TabRowDetail)entity;

            using (var cmd = Connection.CreateCommand())
            {
                cmd.Transaction = tr;

                if (!skipNestedObjects)
                {
                    foreach (var nestedEntity in typedEntity.Clone().Flatten().OrderBy(x => Hierarchy.IndexOf(x.GetType())))
                        nestedEntity.CreateRepository(Connection).Delete(nestedEntity, tr, true);

                }
                else
                {
                    #region Delete TabRowDetail
                    cmd.Parameters.Clear();
                    cmd.CommandText = @"
                        DELETE FROM [dbo].[TabRowDetails] WHERE
                            ([CodTab] = @CodTab AND [Cod] = @Cod);
                        ";
                    cmd.Parameters.AddWithValue("@CodTab", typedEntity?.TabRow?.CodTab ?? typedEntity.CodTab);
                    cmd.Parameters.AddWithValue("@Cod", typedEntity?.TabRow?.Cod ?? typedEntity.Cod);
                    Debug.WriteLine("TabRowDetailRepository.Delete: DELETE FROM [dbo].[TabRowDetails]; " +
                        "SkipNestedObjects=" + skipNestedObjects);
                    Debug.WriteLine("    " + "CodTab=" + typedEntity.CodTab + "; " + "Cod=" + typedEntity.Cod);
                    cmd.ExecuteNonQuery();
                    #endregion
                }
            }
        }

        /// <summary>
        /// Select one entity by key
        /// </summary>
        /// <param name="key">Key (a dictionary containing key column name and its value)</param>
        /// <returns>An entity</returns>
        public override BaseEntity SelectOne(Dictionary<string, object> key)
        {
            #region Validate key
            if (key == null)
                throw new ArgumentNullException("key");
            if (!key.ContainsKey("CodTab"))
                throw new ArgumentNullException("CodTab");
            if (!key.ContainsKey("Cod"))
                throw new ArgumentNullException("Cod");
            #endregion

            using (var cmd = Connection.CreateCommand())
            {
                cmd.CommandText = @"
                    SELECT TOP 1 this.[CodTab] AS [CodTab], this.[Cod] AS [Cod], this.[Pos] AS [Pos], this.[ExtraInfo] AS [ExtraInfo]
                    FROM [dbo].[TabRowDetails] AS this
                    WHERE ([CodTab] = @CodTab AND [Cod] = @Cod);
                    ";

                cmd.Parameters.AddWithValue("@CodTab", (System.String)key["CodTab"]);
                cmd.Parameters.AddWithValue("@Cod", (System.String)key["Cod"]);

                var tbl = new DataTable();
                using (var reader = cmd.ExecuteReader())
                    tbl.Load(reader);

                if (tbl.Rows.Count == 0)
                    return null;

                var entity = new TabRowDetail();
                entity.FromDataRow(tbl.Rows[0]);

                #region Load TabRow
                cmd.Parameters.Clear();
                cmd.CommandText = @"
                    SELECT [CodTab] AS [CodTab], [Cod] AS [Cod], [Description] AS [Description]
                    FROM [dbo].[TabRows]
                    WHERE ([CodTab] = @CodTab AND [Cod] = @Cod);
                    ";

                cmd.Parameters.AddWithValue("@CodTab", entity.CodTab);
                cmd.Parameters.AddWithValue("@Cod", entity.Cod);

                var tabRowTbl = new DataTable();
                using (var reader = cmd.ExecuteReader())
                    tabRowTbl.Load(reader);

                if (tabRowTbl.Rows.Count > 0)
                    foreach (DataRow row in tabRowTbl.Rows)
                    {
                        var child = new TabRow();
                        child.FromDataRow(row);
                        entity.TabRow = child;
                    }
                #endregion

                return entity;
            }
        }

        /// <summary>
        /// Select one entity by key
        /// </summary>
        /// <param name="codTab">CodTab</param>
        /// <param name="cod">Cod</param>
        /// <returns>An entity</returns>
        public TabRowDetail SelectOne(System.String codTab, System.String cod)
        {
            var key = new Dictionary<string, object>();
            key.Add("CodTab", codTab);
            key.Add("Cod", cod);
            return (TabRowDetail)SelectOne(key);
        }

        /// <summary>
        /// Select all entities
        /// </summary>
        /// <param name="skip">Skip</param>
        /// <param name="take">Take</param>
        /// <returns>A collection of entities</returns>
        public override BaseEntityCollection<BaseEntity> SelectAll(int skip = 0, int take = 100)
        {
            using (var cmd = Connection.CreateCommand())
            {
                cmd.CommandText = @"
                    SELECT [CodTab] AS [CodTab], [Cod] AS [Cod], [Pos] AS [Pos], [ExtraInfo] AS [ExtraInfo]
                    FROM [dbo].[TabRowDetails]
                    ORDER BY [CodTab], [Cod]
                    OFFSET " + skip + @" ROWS FETCH NEXT " + take + @" ROWS ONLY;
                    ";

                var coll = new BaseEntityCollection<BaseEntity>();
                var tbl = new DataTable();
                using (var reader = cmd.ExecuteReader())
                    tbl.Load(reader);

                if (tbl.Rows.Count > 0)
                    foreach (DataRow row in tbl.Rows)
                    {
                        var entity = new TabRowDetail();
                        entity.FromDataRow(row);
                        coll.Add(entity);
                    }

                return coll;
            }
        }

        /// <summary>
        /// Count entities
        /// </summary>
        /// <returns>Num. of entities</returns>
        public override int Count()
        {
            using (var cmd = Connection.CreateCommand())
            {
                cmd.CommandText = @"SELECT COUNT(*) FROM [dbo].[TabRowDetails];";
                return (int)cmd.ExecuteScalar();
            }
        }
    }
    #endregion

    #region Function
    public partial class Function : BaseEntity
    {
        #region FunctionName
        private System.String _functionName;
        /// <summary>
        /// Get or set FunctionName
        /// </summary>
        [JsonProperty("functionName")]
        [EntityProperty]
        public System.String FunctionName
        {
            get { return _functionName; }
            set { _functionName = value; }
        }
        #endregion

        public Function()
        {
        }

        /// <summary>
        /// Create a new instance of repository
        /// </summary>
        /// <param name="conn">DB connection</param>
        /// <returns>Repository</returns>
        public override BaseRepository CreateRepository(SqlConnection conn)
        {
            return new FunctionRepository(conn);
        }

        /// <summary>
        /// Initialize entity from a data row
        /// </summary>
        /// <param name="row">Data row</param>
        public override void FromDataRow(DataRow row)
        {
            if (row == null)
                throw new ArgumentNullException("row");

            FunctionName = (System.String)row["FunctionName"];
        }

        /// <summary>
        /// Initialize entity from another entity
        /// </summary>
        /// <param name="entity">Entity</param>
        public override void FromEntity(BaseEntity entity)
        {
            if (entity == null)
                throw new ArgumentNullException("entity");
            if (!(entity is Function))
                throw new ModelException(
                    "Function cannot be initialized from an entity other than a \"Function\""
                    );

            var typedEntity = (Function)entity;
            FunctionName = typedEntity.FunctionName;
        }

        /// <summary>
        /// Get entity key
        /// </summary>
        /// <returns>A dictionary that represents the key</returns>
        public override Dictionary<string, object> GetKey()
        {
            var key = new Dictionary<string, object>();
            key.Add("FunctionName", FunctionName);
            return key;
        }

        /// <summary>
        /// Clone entity
        /// </summary>
        /// <returns>A clone</returns>
        public override BaseEntity Clone()
        {
            var clone = new Function();
            clone.FunctionName = FunctionName;
            return clone;
        }
    }

    public partial class FunctionRepository : BaseRepository
    {
        public FunctionRepository(SqlConnection conn)
            : base(conn, new List<Type>() { typeof(Function) })
        {
        }

        /// <summary>
        /// Insert or update entity
        /// </summary>
        /// <param name="entity">Entity</param>
        /// <param name="tr">Transaction</param>
        /// <param name="skipNestedObjects">
        ///     Flag specifying whether to skip or not InsertOrUpdate for nested objects (optional)
        /// </param>
        public override void InsertOrUpdate(BaseEntity entity, SqlTransaction tr, bool skipNestedObjects = false)
        {
            if (entity == null)
                throw new ArgumentNullException("entity");
            if (!(entity is Function))
                throw new ModelException(
                    "FunctionRepository " +
                    "cannot perform operations on \"" + entity.GetType().Name + "\""
                    );

            var typedEntity = (Function)entity;

            #region Validate fields
            if (typedEntity.FunctionName == null)
                throw new ArgumentNullException("entity.FunctionName");
            #endregion

            using (var cmd = Connection.CreateCommand())
            {
                cmd.Transaction = tr;

                if (!skipNestedObjects)
                {
                    foreach (var nestedEntity in typedEntity.Clone().Flatten().OrderBy(x => Hierarchy.IndexOf(x.GetType())))
                        nestedEntity.CreateRepository(Connection).InsertOrUpdate(nestedEntity, tr, true);
                }
                else
                {
                    #region Insert Function
                    cmd.CommandText = @"
                        IF NOT EXISTS (
                            SELECT TOP 1 * FROM [dbo].[Functions]
                            WHERE ([FunctionName] = @FunctionName)
                            )
                        BEGIN
                            INSERT INTO [dbo].[Functions] ([FunctionName]) VALUES
                                (@FunctionName);
                        END
                        ";
                    cmd.Parameters.AddWithValue("@FunctionName", typedEntity.FunctionName);
                    Debug.WriteLine("FunctionRepository.InsertOrUpdate: INSERT INTO [dbo].[Functions]; " +
                        "SkipNestedObjects=" + skipNestedObjects);
                    Debug.WriteLine("    " + "FunctionName=" + typedEntity.FunctionName);
                    cmd.ExecuteNonQuery();
                    #endregion
                }

            }
        }

        /// <summary>
        /// Delete entity
        /// </summary>
        /// <param name="entity">Entity</param>
        /// <param name="tr">Transaction</param>
        /// <param name="skipNestedObjects">
        ///     Flag specifying whether to skip or not Delete for nested objects (optional)
        /// </param>
        public override void Delete(BaseEntity entity, SqlTransaction tr, bool skipNestedObjects = false)
        {
            if (entity == null)
                throw new ArgumentNullException("entity");
            if (!(entity is Function))
                throw new ModelException(
                    "FunctionRepository " +
                    "cannot perform operations on \"" + entity.GetType().Name + "\""
                    );

            var typedEntity = (Function)entity;

            using (var cmd = Connection.CreateCommand())
            {
                cmd.Transaction = tr;

                if (!skipNestedObjects)
                {
                    foreach (var nestedEntity in typedEntity.Clone().Flatten().OrderBy(x => Hierarchy.IndexOf(x.GetType())))
                        nestedEntity.CreateRepository(Connection).Delete(nestedEntity, tr, true);

                }
                else
                {
                    #region Delete Function
                    cmd.Parameters.Clear();
                    cmd.CommandText = @"
                        DELETE FROM [dbo].[Functions] WHERE
                            ([FunctionName] = @FunctionName);
                        ";
                    cmd.Parameters.AddWithValue("@FunctionName", typedEntity.FunctionName);
                    Debug.WriteLine("FunctionRepository.Delete: DELETE FROM [dbo].[Functions]; " +
                        "SkipNestedObjects=" + skipNestedObjects);
                    Debug.WriteLine("    " + "FunctionName=" + typedEntity.FunctionName);
                    cmd.ExecuteNonQuery();
                    #endregion
                }
            }
        }

        /// <summary>
        /// Select one entity by key
        /// </summary>
        /// <param name="key">Key (a dictionary containing key column name and its value)</param>
        /// <returns>An entity</returns>
        public override BaseEntity SelectOne(Dictionary<string, object> key)
        {
            #region Validate key
            if (key == null)
                throw new ArgumentNullException("key");
            if (!key.ContainsKey("FunctionName"))
                throw new ArgumentNullException("FunctionName");
            #endregion

            using (var cmd = Connection.CreateCommand())
            {
                cmd.CommandText = @"
                    SELECT TOP 1 this.[FunctionName] AS [FunctionName]
                    FROM [dbo].[Functions] AS this
                    WHERE ([FunctionName] = @FunctionName);
                    ";

                cmd.Parameters.AddWithValue("@FunctionName", (System.String)key["FunctionName"]);

                var tbl = new DataTable();
                using (var reader = cmd.ExecuteReader())
                    tbl.Load(reader);

                if (tbl.Rows.Count == 0)
                    return null;

                var entity = new Function();
                entity.FromDataRow(tbl.Rows[0]);

                return entity;
            }
        }

        /// <summary>
        /// Select one entity by key
        /// </summary>
        /// <param name="functionName">FunctionName</param>
        /// <returns>An entity</returns>
        public Function SelectOne(System.String functionName)
        {
            var key = new Dictionary<string, object>();
            key.Add("FunctionName", functionName);
            return (Function)SelectOne(key);
        }

        /// <summary>
        /// Select all entities
        /// </summary>
        /// <param name="skip">Skip</param>
        /// <param name="take">Take</param>
        /// <returns>A collection of entities</returns>
        public override BaseEntityCollection<BaseEntity> SelectAll(int skip = 0, int take = 100)
        {
            using (var cmd = Connection.CreateCommand())
            {
                cmd.CommandText = @"
                    SELECT [FunctionName] AS [FunctionName]
                    FROM [dbo].[Functions]
                    ORDER BY [FunctionName]
                    OFFSET " + skip + @" ROWS FETCH NEXT " + take + @" ROWS ONLY;
                    ";

                var coll = new BaseEntityCollection<BaseEntity>();
                var tbl = new DataTable();
                using (var reader = cmd.ExecuteReader())
                    tbl.Load(reader);

                if (tbl.Rows.Count > 0)
                    foreach (DataRow row in tbl.Rows)
                    {
                        var entity = new Function();
                        entity.FromDataRow(row);
                        coll.Add(entity);
                    }

                return coll;
            }
        }

        /// <summary>
        /// Count entities
        /// </summary>
        /// <returns>Num. of entities</returns>
        public override int Count()
        {
            using (var cmd = Connection.CreateCommand())
            {
                cmd.CommandText = @"SELECT COUNT(*) FROM [dbo].[Functions];";
                return (int)cmd.ExecuteScalar();
            }
        }
    }
    #endregion
}
