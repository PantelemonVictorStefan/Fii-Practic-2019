<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Configuration" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="$(TargetPath)" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="AppBase.ORM" #>
<#@ output extension=".cs" #>
<#
var modelPath = Path.Combine(
    Host.ResolveAssemblyReference("$(ProjectDir)"),
        "CompleteModel.json"
    );
var model = Model.Load(modelPath);
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AppBase.ORM.Entities
{
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Collections.Specialized;
    using System.Data;
    using System.Data.SqlClient;
    using System.Diagnostics;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
<#
foreach (var entity in model.Entities)
{
    var lists = new List<Tuple<ModelField, string, string>>();
    var hierarchy = model.GetEntityRelationHierarchy(entity);
    var entityRelationFields =
        new Dictionary<ModelField, Tuple<string, string, ModelField>>();
    foreach (var relationField in entity.GetRelationFields())
    {
        var relationChain = model.GetRelationEntityChain(
            relationField.Relation,
            entity
            );
        if (relationChain.RelationType == ModelRelationEntityChainType.OneToOne ||
            relationChain.RelationType == ModelRelationEntityChainType.ManyToOne)
            foreach (var field in relationChain.GetRelationFields())
                if (field.Key != null && field.Value != null)
                    entityRelationFields[field.Key] = new Tuple<string, string, ModelField>(
                        relationChain.End2.Name,
                        relationField.FieldName,
                        field.Value
                        );
    }

    var entityKeyFields = entity.GetKeyFields();
    var entityFields = entity.GetFields();
#>

    #region <#= entity.Name #>
    public partial class <#= entity.Name #> : BaseEntity
    {
<#
    foreach (var field in entity.Fields.OrderBy(x => !string.IsNullOrEmpty(x.Relation)))
    {
        var fieldName = Char.ToLowerInvariant(field.FieldName[0]) + field.FieldName.Substring(1);
        var privateFieldName = "_" + fieldName;
        var getFn = "get { return " + privateFieldName + "; }";
        var setFn = "set { " + privateFieldName + " = value; }";
        var type = string.IsNullOrEmpty(field.Relation)
            ? field.GetFieldType()
            : model.GetEntityType(field.Relation, entity);
        if (type.StartsWith("BaseEntityCollection<"))
        {
            setFn = "internal " + setFn;
            lists.Add(
                new Tuple<ModelField, string, string>(
                    field,
                    privateFieldName,
                    type
                    ));
        }
#>
        #region <#= field.FieldName #>
        private <#= type #> <#= privateFieldName #>;
        /// <summary>
        /// Get or set <#= field.FieldName #>
        /// </summary>
        [JsonProperty("<#= fieldName #>")]
        [EntityProperty]
        public <#= type #> <#= field.FieldName #>
        {
            <#= getFn #>
            <#= setFn #>
        }
        #endregion

<#
    }
#>
        public <#= entity.Name #>()
        {
<#
    foreach (var item in lists)
    {
#>
            <#= item.Item2 #> = new <#= item.Item3 #>();
<#
        var relationChain = model.GetRelationEntityChain(
            item.Item1.Relation,
            entity
            );
        if (relationChain.RelationType != ModelRelationEntityChainType.ManyToMany)
        {
            var relationFields = relationChain.GetRelationFields();
#>
            <#= item.Item2 #>.CollectionEntityFlatten +=
                (<#= relationChain.End2.Name #> entity) =>
                {
<#
            foreach (var field in relationFields)
            {
#>
                    entity.<#= field.Value.FieldName #> = <#= field.Key.FieldName #>;
<#
            }
#>
                };
<#
        }
    }
#>
        }

        /// <summary>
        /// Create a new instance of repository
        /// </summary>
        /// <param name="conn">DB connection</param>
        /// <returns>Repository</returns>
        public override BaseRepository CreateRepository(SqlConnection conn)
        {
            return new <#= entity.Name #>Repository(conn);
        }

        /// <summary>
        /// Initialize entity from a data row
        /// </summary>
        /// <param name="row">Data row</param>
        public override void FromDataRow(DataRow row)
        {
            if (row == null)
                throw new ArgumentNullException("row");

<#
    foreach (var field in entityFields)
    {
        var type = field.GetFieldType();
        if (field.IsNullable == true)
        {
#>
            <#= field.FieldName #> = !row.IsNull("<#= field.ColumnName #>") ? (<#= type #>)row["<#= field.ColumnName #>"] : (<#= type #>)null;
<#
        }
        else
        {
#>
            <#= field.FieldName #> = (<#= type #>)row["<#= field.ColumnName #>"];
<#
        }
    }
#>
        }

        /// <summary>
        /// Initialize entity from another entity
        /// </summary>
        /// <param name="entity">Entity</param>
        public override void FromEntity(BaseEntity entity)
        {
            if (entity == null)
                throw new ArgumentNullException("entity");
            if (!(entity is <#= entity.Name #>))
                throw new ModelException(
                    "<#= entity.Name #> cannot be initialized from an entity other than a \"<#= entity.Name #>\""
                    );

            var typedEntity = (<#= entity.Name #>)entity;
<#
    foreach (var field in entity.Fields.OrderBy(x => !string.IsNullOrEmpty(x.Relation)))
    {
#>
            <#= field.FieldName #> = typedEntity.<#= field.FieldName #>;
<#
    }
#>
        }

        /// <summary>
        /// Get entity key
        /// </summary>
        /// <returns>A dictionary that represents the key</returns>
        public override Dictionary<string, object> GetKey()
        {
            var key = new Dictionary<string, object>();
<#
    foreach (var field in entityKeyFields)
    {
#>
            key.Add("<#= field.FieldName #>", <#= field.FieldName #>);
<#
    }
#>
            return key;
        }

        /// <summary>
        /// Clone entity
        /// </summary>
        /// <returns>A clone</returns>
        public override BaseEntity Clone()
        {
            var clone = new <#= entity.Name #>();
<#
    foreach (var field in entity.Fields.OrderBy(x => !string.IsNullOrEmpty(x.Relation)))
    {
        if (string.IsNullOrEmpty(field.Relation))
        {
#>
            clone.<#= field.FieldName #> = <#= field.FieldName #>;
<#
        }
        else
        {
#>
            clone.<#= field.FieldName #> = (<#= model.GetEntityType(field.Relation, entity) #>)<#= field.FieldName #>?.Clone();
<#
        }
    }
#>
            return clone;
        }
    }

    public partial class <#= entity.Name #>Repository : BaseRepository
    {
        public <#= entity.Name #>Repository(SqlConnection conn)
            : base(conn, new List<Type>() { <#= string.Join(", ", hierarchy.Select(x => "typeof(" + x.Name + ")")) #> })
        {
        }

        /// <summary>
        /// Insert or update entity
        /// </summary>
        /// <param name="entity">Entity</param>
        /// <param name="tr">Transaction</param>
        /// <param name="skipNestedObjects">
        ///     Flag specifying whether to skip or not InsertOrUpdate for nested objects (optional)
        /// </param>
        public override void InsertOrUpdate(BaseEntity entity, SqlTransaction tr, bool skipNestedObjects = false)
        {
            if (entity == null)
                throw new ArgumentNullException("entity");
            if (!(entity is <#= entity.Name #>))
                throw new ModelException(
                    "<#= entity.Name #>Repository " +
                    "cannot perform operations on \"" + entity.GetType().Name + "\""
                    );

            var typedEntity = (<#= entity.Name #>)entity;

<#
        var fieldsToValidate =
            entityFields
                .Where(x => x.IsNullable != true && !Type.GetType(x.GetFieldType()).IsValueType)
                .ToList();
        foreach (var relationField in entityRelationFields)
            fieldsToValidate
                .Remove(relationField.Key);
        if (fieldsToValidate.Count > 0)
        {
#>
            #region Validate fields
<#
            foreach (var field in fieldsToValidate)
            {
#>
            if (typedEntity.<#= field.FieldName #> == null)
                throw new ArgumentNullException("entity.<#= field.FieldName #>");
<#
            }
#>
            #endregion

<#
        }
#>
            using (var cmd = Connection.CreateCommand())
            {
                cmd.Transaction = tr;

                if (!skipNestedObjects)
                {
                    foreach (var nestedEntity in typedEntity.Clone().Flatten().OrderBy(x => Hierarchy.IndexOf(x.GetType())))
                        nestedEntity.CreateRepository(Connection).InsertOrUpdate(nestedEntity, tr, true);
                }
                else
                {
                    #region Insert <#= entity.Name #>
                    cmd.CommandText = @"
                        IF NOT EXISTS (
                            SELECT TOP 1 * FROM [dbo].[<#= entity.TableName #>]
                            WHERE (<#= string.Join(" AND ", entityKeyFields.Select(x => "[" + x.ColumnName + "] = @" + x.FieldName)) #>)
                            )
                        BEGIN
                            INSERT INTO [dbo].[<#= entity.TableName #>] (<#= string.Join(", ", entityFields.Select(x => "[" + x.ColumnName + "]")) #>) VALUES
                                (<#= string.Join(", ", entityFields.Select(x => "@" + x.FieldName)) #>);
                        END
<#
        var updateFields = entityFields.Where(x => !(x.IsKey == true)).ToList();
        if (updateFields.Count > 0)
        {
#>
                        ELSE
                        BEGIN
                            UPDATE [dbo].[<#= entity.TableName #>] SET
                                <#= string.Join(", ", updateFields.Where(x => !(x.IsKey == true)).Select(x => "[" + x.ColumnName + "] = @" + x.FieldName)) #>
                            WHERE (<#= string.Join(" AND ", entityKeyFields.Select(x => "[" + x.ColumnName + "] = @" + x.FieldName)) #>);
                        END
<#
        }
#>
                        ";
<#
        foreach (var field in entityFields)
        {
            var path = "typedEntity." + field.FieldName;
                if (entityRelationFields.ContainsKey(field))
                    path = "typedEntity?." + entityRelationFields[field].Item2 + "?." + entityRelationFields[field].Item3.FieldName + " ?? "  + path;

            if (field.IsNullable == true)
            {
#>
                    cmd.Parameters.AddWithValue("@<#= field.FieldName #>", <#= path #> ?? (object)DBNull.Value);
<#
            }
            else
            {
#>
                    cmd.Parameters.AddWithValue("@<#= field.FieldName #>", <#= path #>);
<#
            }
        }
#>
                    Debug.WriteLine("<#= entity.Name #>Repository.InsertOrUpdate: INSERT INTO [dbo].[<#= entity.TableName #>]; " +
                        "SkipNestedObjects=" + skipNestedObjects);
                    Debug.WriteLine("    " + <#= string.Join(" + \";\" + ", entityKeyFields.Select(x => "\"" + x.FieldName + "=\" + typedEntity." + x.FieldName)) #>);
                    cmd.ExecuteNonQuery();
                    #endregion
                }

<#
        foreach (var relationField in entity.GetRelationFields())
        {
            var relationChain = model.GetRelationEntityChain(
                relationField.Relation,
                entity
                );
            switch (relationChain.RelationType)
            {
                case ModelRelationEntityChainType.ManyToMany:
                {
                    var relation = relationChain.Parent.Relations.FirstOrDefault(
                        x => x.EntityName.Equals(entity.Name, StringComparison.InvariantCultureIgnoreCase));
                    var relationFields = new Dictionary<string, ModelField>();
                    foreach (var field in relation.Fields)
                        relationFields.Add(field.ParentColumnName,
                            entity.Fields.FirstOrDefault(
                                x => x.ColumnName != null &&
                                x.ColumnName.Equals(field.ChildColumnName, StringComparison.InvariantCultureIgnoreCase))
                                );
                    foreach (var field in relationChain.Relation.Fields)
                        relationFields.Add(field.ParentColumnName,
                            relationChain.End2.Fields.FirstOrDefault(
                                x => x.ColumnName != null &&
                                x.ColumnName.Equals(field.ChildColumnName, StringComparison.InvariantCultureIgnoreCase))
                                );
#>
                #region Insert <#= relationChain.Parent.Name #>
                foreach (var item in typedEntity.<#= relationField.FieldName #>)
                {
                    cmd.Parameters.Clear();
                    cmd.CommandText = @"
                        IF NOT EXISTS (
                            SELECT TOP 1 * FROM [dbo].[<#= relationChain.Parent.TableName #>]
                            WHERE (<#= string.Join(" AND ", relationFields.Where(x => x.Value.IsKey == true).Select(x => "[" + x.Value.ColumnName + "] = @" + x.Value.FieldName)) #>)
                            )
                        BEGIN
                            INSERT INTO [dbo].[<#= relationChain.Parent.TableName #>] (<#= string.Join(", ", relationFields.Select(x => "[" + x.Key + "]")) #>) VALUES
                                (<#= string.Join(", ", relationFields.Select(x => "@" + x.Value.FieldName)) #>);
                        END
<#
                    var relationUpdateFields = relationFields.Where(x => !(x.Value.IsKey == true));
                    if (relationUpdateFields.Count() > 0)
                    {
#>
                        ELSE
                        BEGIN
                            UPDATE [dbo].[<#= relationChain.Parent.TableName #>] SET
                                <#= string.Join(", ", relationUpdateFields.Select(x => "[" + x.Key + "] = @" + x.Value.FieldName)) #>
                            WHERE (<#= string.Join(" AND ", relationUpdateFields.Where(x => x.Value.IsKey == true).Select(x => "[" + x.Key + "] = @" + x.Value.FieldName)) #>);
                        END
<#
                    }
#>
                        ";
<#
                    foreach (var field in relationFields)
                    {
                        var path = "typedEntity";
                        if (relationChain.End2.Fields.Contains(field.Value))
                            path = "item";
#>
                    cmd.Parameters.AddWithValue("@<#= field.Value.FieldName #>", <#= path #>.<#= field.Value.FieldName #>);
<#
                    }
#>
                    Debug.WriteLine("<#= entity.Name #>Repository.InsertOrUpdate: INSERT INTO [dbo].[<#= relationChain.Parent.TableName #>]; " +
                        "SkipNestedObjects=" + skipNestedObjects);
                    Debug.WriteLine("    " + <#= string.Join(" + \";\" + ", entityKeyFields.Select(x => "\"" + x.FieldName + "=\" + typedEntity." + x.FieldName)) #>);
                    cmd.ExecuteNonQuery();
                }
                #endregion

<#
                    break;
                }
            }
        }
#>
            }
        }

        /// <summary>
        /// Delete entity
        /// </summary>
        /// <param name="entity">Entity</param>
        /// <param name="tr">Transaction</param>
        /// <param name="skipNestedObjects">
        ///     Flag specifying whether to skip or not Delete for nested objects (optional)
        /// </param>
        public override void Delete(BaseEntity entity, SqlTransaction tr, bool skipNestedObjects = false)
        {
            if (entity == null)
                throw new ArgumentNullException("entity");
            if (!(entity is <#= entity.Name #>))
                throw new ModelException(
                    "<#= entity.Name #>Repository " +
                    "cannot perform operations on \"" + entity.GetType().Name + "\""
                    );

            var typedEntity = (<#= entity.Name #>)entity;

            using (var cmd = Connection.CreateCommand())
            {
                cmd.Transaction = tr;

<#
        var nestedObjectsToSkip = new List<ModelField>();

        foreach (var relationField in entity.GetRelationFields())
        {
            var relationChain = model.GetRelationEntityChain(
                relationField.Relation,
                entity
                );
            switch (relationChain.RelationType)
            {
                case ModelRelationEntityChainType.ManyToMany:
                case ModelRelationEntityChainType.OneToMany:
                {
                    var relation = relationChain.Parent.Relations.FirstOrDefault(
                        x => x.EntityName.Equals(entity.Name, StringComparison.InvariantCultureIgnoreCase));
                    var relationFields = new Dictionary<string, ModelField>();
                    foreach (var field in relation.Fields)
                        relationFields.Add(field.ParentColumnName,
                            entity.Fields.FirstOrDefault(
                                x => x.ColumnName != null &&
                                x.ColumnName.Equals(field.ChildColumnName, StringComparison.InvariantCultureIgnoreCase))
                                );
                    if (relationChain.RelationType == ModelRelationEntityChainType.ManyToMany)
                        nestedObjectsToSkip.Add(relationField);
                    if (relationChain.RelationType == ModelRelationEntityChainType.OneToMany)
                        if (relationFields.All(x => x.Value.IsNullable == true) &&
                            relationField.CascadeDelete != true)
                        {
                            nestedObjectsToSkip.Add(relationField);
                            continue;
                        }
#>
                #region Delete <#= relationChain.Parent.Name #>
                cmd.Parameters.Clear();
                cmd.CommandText = @"
                    DELETE FROM [dbo].[<#= relationChain.Parent.TableName #>] WHERE
                        (<#= string.Join(" AND ", relationFields.Select(x => "[" + x.Key + "] = @" + x.Value.FieldName)) #>);
                    ";
<#
                    foreach (var field in relationFields)
                    {
#>
                cmd.Parameters.AddWithValue("@<#= field.Value.FieldName #>", typedEntity.<#= field.Value.FieldName #>);
<#
                    }
#>
                Debug.WriteLine("<#= entity.Name #>Repository.Delete: DELETE FROM [dbo].[<#= relationChain.Parent.TableName #>]; " +
                    "SkipNestedObjects=" + skipNestedObjects);
                Debug.WriteLine("    " + <#= string.Join(" + \";\" + ", entityKeyFields.Select(x => "\"" + x.FieldName + "=\" + typedEntity." + x.FieldName)) #>);
                cmd.ExecuteNonQuery();
                #endregion

<#
                    break;
                }
                case ModelRelationEntityChainType.ManyToOne:
                {
                    nestedObjectsToSkip.Add(relationField);
                    break;
                }
            }
        }
#>
                if (!skipNestedObjects)
                {
<#
        if (nestedObjectsToSkip.Count > 0)
        {
            foreach (var field in nestedObjectsToSkip)
            {
#>
                    var temp<#= field.FieldName #> = typedEntity.<#= field.FieldName #>;
                    typedEntity.<#= field.FieldName #> = null;
<#
            }
#>

<#
        }
#>
                    foreach (var nestedEntity in typedEntity.Clone().Flatten().OrderBy(x => Hierarchy.IndexOf(x.GetType())))
                        nestedEntity.CreateRepository(Connection).Delete(nestedEntity, tr, true);

<#
        if (nestedObjectsToSkip.Count > 0)
        {
            foreach (var field in nestedObjectsToSkip)
            {
#>
                    typedEntity.<#= field.FieldName #> = temp<#= field.FieldName #>;
<#
            }
#>

<#
        }
#>
                }
                else
                {
                    #region Delete <#= entity.Name #>
                    cmd.Parameters.Clear();
                    cmd.CommandText = @"
                        DELETE FROM [dbo].[<#= entity.TableName #>] WHERE
                            (<#= string.Join(" AND ", entityKeyFields.Select(x => "[" + x.ColumnName + "] = @" + x.FieldName)) #>);
                        ";
<#
        foreach (var field in entityKeyFields)
        {
            var path = "typedEntity." + field.FieldName;
                if (entityRelationFields.ContainsKey(field))
                    path = "typedEntity?." + entityRelationFields[field].Item2 + "?." + entityRelationFields[field].Item3.FieldName + " ?? "  + path;
#>
                    cmd.Parameters.AddWithValue("@<#= field.FieldName #>", <#= path #>);
<#
        }
#>
                    Debug.WriteLine("<#= entity.Name #>Repository.Delete: DELETE FROM [dbo].[<#= entity.TableName #>]; " +
                        "SkipNestedObjects=" + skipNestedObjects);
                    Debug.WriteLine("    " + <#= string.Join(" + \"; \" + ", entityKeyFields.Select(x => "\"" + x.FieldName + "=\" + typedEntity." + x.FieldName)) #>);
                    cmd.ExecuteNonQuery();
                    #endregion
                }
            }
        }

<#
    var keyFields = new Dictionary<ModelField, Tuple<string, string>>();
    foreach (var field in entityKeyFields)
        keyFields.Add(field,
            new Tuple<string, string>(
                Char.ToLowerInvariant(field.FieldName[0]) + field.FieldName.Substring(1),
                field.GetFieldType()
                ));
#>
        /// <summary>
        /// Select one entity by key
        /// </summary>
        /// <param name="key">Key (a dictionary containing key column name and its value)</param>
        /// <returns>An entity</returns>
        public override BaseEntity SelectOne(Dictionary<string, object> key)
        {
            #region Validate key
            if (key == null)
                throw new ArgumentNullException("key");
<#
    foreach (var field in keyFields)
    {
#>
            if (!key.ContainsKey("<#= field.Key.FieldName #>"))
                throw new ArgumentNullException("<#= field.Key.FieldName #>");
<#
    }
#>
            #endregion

            using (var cmd = Connection.CreateCommand())
            {
                cmd.CommandText = @"
                    SELECT TOP 1 <#= string.Join(", ", entityFields.Select(x => "this.[" + x.ColumnName + "] AS [" + x.ColumnName + "]")) #>
                    FROM [dbo].[<#= entity.TableName #>] AS this
                    WHERE (<#= string.Join(" AND ", keyFields.Select(x => "[" + x.Key.ColumnName + "] = @" + x.Key.FieldName)) #>);
                    ";

<#
    foreach (var field in keyFields)
    {
#>
                cmd.Parameters.AddWithValue("@<#= field.Key.FieldName #>", (<#= field.Value.Item2 #>)key["<#= field.Key.FieldName #>"]);
<#
    }
#>

                var tbl = new DataTable();
                using (var reader = cmd.ExecuteReader())
                    tbl.Load(reader);

                if (tbl.Rows.Count == 0)
                    return null;

                var entity = new <#= entity.Name #>();
                entity.FromDataRow(tbl.Rows[0]);

<#
    foreach (var relationField in entity.GetRelationFields())
    {
        var relationChain = model.GetRelationEntityChain(
            relationField.Relation,
            entity
            );
        switch (relationChain.RelationType)
        {
            case ModelRelationEntityChainType.ManyToMany:
            {
                var relation = relationChain.Parent.Relations.FirstOrDefault(
                    x => x.EntityName.Equals(entity.Name, StringComparison.InvariantCultureIgnoreCase));
                var relationFields = new Dictionary<string, ModelField>();
                foreach (var field in relation.Fields)
                    relationFields.Add(field.ParentColumnName,
                        entity.Fields.FirstOrDefault(
                            x => x.ColumnName != null &&
                            x.ColumnName.Equals(field.ChildColumnName, StringComparison.InvariantCultureIgnoreCase))
                            );
                var name = Char.ToLowerInvariant(relationChain.End2.Name[0]) + relationChain.End2.Name.Substring(1);
#>
                #region Load <#= relationChain.End2.Name #>
                cmd.Parameters.Clear();
                cmd.CommandText = @"
                    SELECT <#= string.Join(", ", relationChain.End2.GetFields().Select(x => "child.[" + x.ColumnName + "] AS [" + x.ColumnName + "]")) #>
                    FROM [dbo].[<#= relationChain.End2.TableName #>] AS child
                    RIGHT JOIN [dbo].[<#= relationChain.Parent.TableName #>] AS parent
                        ON (<#= string.Join(" AND ", relationChain.Relation.Fields.Select(x => "parent.[" + x.ParentColumnName + "] = " + "child.[" + x.ChildColumnName + "]")) #>)
                    WHERE (<#= string.Join(" AND ", relationFields.Select(x => "parent.[" + x.Key + "] = @" + x.Value.FieldName)) #>);
                    ";

<#
                    foreach (var field in relationFields)
                    {
#>
                cmd.Parameters.AddWithValue("@<#= field.Value.FieldName #>", entity.<#= field.Value.FieldName #>);
<#
                    }
#>

                var <#= name #>Tbl = new DataTable();
                using (var reader = cmd.ExecuteReader())
                    <#= name #>Tbl.Load(reader);

                if (<#= name #>Tbl.Rows.Count > 0)
                    foreach (DataRow row in <#= name #>Tbl.Rows)
                    {
                        var child = new <#= relationChain.End2.Name #>();
                        child.FromDataRow(row);
                        entity.<#= relationField.FieldName #>.Add(child);
                    }
                #endregion

<#
                break;
            }
            case ModelRelationEntityChainType.OneToMany:
            case ModelRelationEntityChainType.ManyToOne:
            case ModelRelationEntityChainType.OneToOne:
            {
                var relationFields = new Dictionary<string, ModelField>();
                foreach (var field in relationChain.Relation.Fields)
                    relationFields.Add(field.ParentColumnName,
                        entity.Fields.FirstOrDefault(
                            x => x.ColumnName != null &&
                            x.ColumnName.Equals(field.ChildColumnName, StringComparison.InvariantCultureIgnoreCase))
                            );
                var name = Char.ToLowerInvariant(relationChain.End2.Name[0]) + relationChain.End2.Name.Substring(1);
#>
                #region Load <#= relationChain.End2.Name #>
                cmd.Parameters.Clear();
                cmd.CommandText = @"
                    SELECT <#= string.Join(", ", relationChain.End2.GetFields().Select(x => "[" + x.ColumnName + "] AS [" + x.ColumnName + "]")) #>
                    FROM [dbo].[<#= relationChain.End2.TableName #>]
                    WHERE (<#= string.Join(" AND ", relationFields.Select(x => "[" + x.Key + "] = @" + x.Value.FieldName)) #>);
                    ";

<#
                    foreach (var field in relationFields)
                    {
#>
                cmd.Parameters.AddWithValue("@<#= field.Value.FieldName #>", entity.<#= field.Value.FieldName #>);
<#
                    }
#>

                var <#= name #>Tbl = new DataTable();
                using (var reader = cmd.ExecuteReader())
                    <#= name #>Tbl.Load(reader);

                if (<#= name #>Tbl.Rows.Count > 0)
                    foreach (DataRow row in <#= name #>Tbl.Rows)
                    {
                        var child = new <#= relationChain.End2.Name #>();
                        child.FromDataRow(row);
<#
                if (relationChain.RelationType == ModelRelationEntityChainType.OneToMany)
                {
#>
                        entity.<#= relationField.FieldName #>.Add(child);
<#
                }
                else
                {
#>
                        entity.<#= relationField.FieldName #> = child;
<#
                }
#>
                    }
                #endregion

<#
                break;
            }
        }
    }
#>
                return entity;
            }
        }

        /// <summary>
        /// Select one entity by key
        /// </summary>
<#
    foreach (var field in keyFields)
    {
#>
        /// <param name="<#= field.Value.Item1 #>"><#= field.Key.FieldName #></param>
<#
    }
#>
        /// <returns>An entity</returns>
        public <#= entity.Name #> SelectOne(<#= string.Join(", ", keyFields.Select(x => x.Value.Item2 + " " + x.Value.Item1)) #>)
        {
            var key = new Dictionary<string, object>();
<#
    foreach (var field in keyFields)
    {
#>
            key.Add("<#= field.Key.FieldName #>", <#= field.Value.Item1 #>);
<#
    }
#>
            return (<#= entity.Name #>)SelectOne(key);
        }

        /// <summary>
        /// Select all entities
        /// </summary>
        /// <param name="skip">Skip</param>
        /// <param name="take">Take</param>
        /// <returns>A collection of entities</returns>
        public override BaseEntityCollection<BaseEntity> SelectAll(int skip = 0, int take = 100)
        {
            using (var cmd = Connection.CreateCommand())
            {
                cmd.CommandText = @"
                    SELECT <#= string.Join(", ", entityFields.Select(x => "[" + x.ColumnName + "] AS [" + x.ColumnName + "]")) #>
                    FROM [dbo].[<#= entity.TableName #>]
                    ORDER BY <#= string.Join(", ", keyFields.Select(x => "[" + x.Key.ColumnName + "]")) #>
                    OFFSET " + skip + @" ROWS FETCH NEXT " + take + @" ROWS ONLY;
                    ";

                var coll = new BaseEntityCollection<BaseEntity>();
                var tbl = new DataTable();
                using (var reader = cmd.ExecuteReader())
                    tbl.Load(reader);

                if (tbl.Rows.Count > 0)
                    foreach (DataRow row in tbl.Rows)
                    {
                        var entity = new <#= entity.Name #>();
                        entity.FromDataRow(row);
                        coll.Add(entity);
                    }

                return coll;
            }
        }

        /// <summary>
        /// Count entities
        /// </summary>
        /// <returns>Num. of entities</returns>
        public override int Count()
        {
            using (var cmd = Connection.CreateCommand())
            {
                cmd.CommandText = @"SELECT COUNT(*) FROM [dbo].[<#= entity.TableName #>];";
                return (int)cmd.ExecuteScalar();
            }
        }
    }
    #endregion
<#
}
#>
}
