//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AppBase.WebAPI.Controllers
{
    using Newtonsoft.Json;
    using ORM;
    using ORM.Entities;
    using System;
    using System.Collections.Generic;
    using System.Collections.Specialized;
    using System.Configuration;
    using System.Data;
    using System.Data.SqlClient;
    using System.Diagnostics;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Text;
    using System.Threading.Tasks;
    using System.Web.Http;

    #region User
    public partial class UserDataController : ApiController
    {
        private readonly string _connStr =
            ConfigurationManager.ConnectionStrings["AppBase"].ConnectionString;

        /// <summary>
        /// Insert or update entity
        /// </summary>
        /// <param name="entity">Entity</param>
        [HttpPost]
        [Route("Api/Data/User/InsertOrUpdate")]
        public void InsertOrUpdate(User entity)
        {
            using (var conn = new SqlConnection(_connStr))
            {
                conn.Open();
                entity.CreateRepository(conn).InsertOrUpdate(entity);
            }
        }

        /// <summary>
        /// Delete entity
        /// </summary>
        /// <param name="entity">Entity</param>
        [HttpPost]
        [Route("Api/Data/User/Delete")]
        public void Delete(User entity)
        {
            using (var conn = new SqlConnection(_connStr))
            {
                conn.Open();
                entity.CreateRepository(conn).Delete(entity);
            }
        }

        /// <summary>
        /// Select one entity by key
        /// </summary>
        /// <param name="userName">UserName</param>
        /// <returns>An entity</returns>
        [HttpGet]
        [Route("Api/Data/User/SelectOne")]
        public User SelectOne(System.String userName)
        {
            var key = new Dictionary<string, object>();
            key.Add("UserName", userName);

            using (var conn = new SqlConnection(_connStr))
            {
                conn.Open();
                return (new UserRepository(conn)).SelectOne(key) as User;
            }
        }

        /// <summary>
        /// Select all entities
        /// </summary>
        /// <param name="skip">Skip</param>
        /// <param name="take">Take</param>
        /// <returns>A collection of entities</returns>
        [HttpGet]
        [Route("Api/Data/User/SelectAll")]
        public BaseEntityCollection<User> SelectAll(int skip = 0, int take = 100)
        {
            using (var conn = new SqlConnection(_connStr))
            {
                conn.Open();
                return (new UserRepository(conn)).SelectAll(skip, take).To<User>();
            }
        }

        /// <summary>
        /// Count entities
        /// </summary>
        /// <returns>Num. of entities</returns>
        [HttpGet]
        [Route("Api/Data/User/Count")]
        public int Count()
        {
            using (var conn = new SqlConnection(_connStr))
            {
                conn.Open();
                return (new UserRepository(conn)).Count();
            }
        }
    }
    #endregion

    #region UserInRole
    public partial class UserInRoleDataController : ApiController
    {
        private readonly string _connStr =
            ConfigurationManager.ConnectionStrings["AppBase"].ConnectionString;

        /// <summary>
        /// Insert or update entity
        /// </summary>
        /// <param name="entity">Entity</param>
        [HttpPost]
        [Route("Api/Data/UserInRole/InsertOrUpdate")]
        public void InsertOrUpdate(UserInRole entity)
        {
            using (var conn = new SqlConnection(_connStr))
            {
                conn.Open();
                entity.CreateRepository(conn).InsertOrUpdate(entity);
            }
        }

        /// <summary>
        /// Delete entity
        /// </summary>
        /// <param name="entity">Entity</param>
        [HttpPost]
        [Route("Api/Data/UserInRole/Delete")]
        public void Delete(UserInRole entity)
        {
            using (var conn = new SqlConnection(_connStr))
            {
                conn.Open();
                entity.CreateRepository(conn).Delete(entity);
            }
        }

        /// <summary>
        /// Select one entity by key
        /// </summary>
        /// <param name="userName">UserName</param>
        /// <param name="roleName">RoleName</param>
        /// <returns>An entity</returns>
        [HttpGet]
        [Route("Api/Data/UserInRole/SelectOne")]
        public UserInRole SelectOne(System.String userName, System.String roleName)
        {
            var key = new Dictionary<string, object>();
            key.Add("UserName", userName);
            key.Add("RoleName", roleName);

            using (var conn = new SqlConnection(_connStr))
            {
                conn.Open();
                return (new UserInRoleRepository(conn)).SelectOne(key) as UserInRole;
            }
        }

        /// <summary>
        /// Select all entities
        /// </summary>
        /// <param name="skip">Skip</param>
        /// <param name="take">Take</param>
        /// <returns>A collection of entities</returns>
        [HttpGet]
        [Route("Api/Data/UserInRole/SelectAll")]
        public BaseEntityCollection<UserInRole> SelectAll(int skip = 0, int take = 100)
        {
            using (var conn = new SqlConnection(_connStr))
            {
                conn.Open();
                return (new UserInRoleRepository(conn)).SelectAll(skip, take).To<UserInRole>();
            }
        }

        /// <summary>
        /// Count entities
        /// </summary>
        /// <returns>Num. of entities</returns>
        [HttpGet]
        [Route("Api/Data/UserInRole/Count")]
        public int Count()
        {
            using (var conn = new SqlConnection(_connStr))
            {
                conn.Open();
                return (new UserInRoleRepository(conn)).Count();
            }
        }
    }
    #endregion

    #region Role
    public partial class RoleDataController : ApiController
    {
        private readonly string _connStr =
            ConfigurationManager.ConnectionStrings["AppBase"].ConnectionString;

        /// <summary>
        /// Insert or update entity
        /// </summary>
        /// <param name="entity">Entity</param>
        [HttpPost]
        [Route("Api/Data/Role/InsertOrUpdate")]
        public void InsertOrUpdate(Role entity)
        {
            using (var conn = new SqlConnection(_connStr))
            {
                conn.Open();
                entity.CreateRepository(conn).InsertOrUpdate(entity);
            }
        }

        /// <summary>
        /// Delete entity
        /// </summary>
        /// <param name="entity">Entity</param>
        [HttpPost]
        [Route("Api/Data/Role/Delete")]
        public void Delete(Role entity)
        {
            using (var conn = new SqlConnection(_connStr))
            {
                conn.Open();
                entity.CreateRepository(conn).Delete(entity);
            }
        }

        /// <summary>
        /// Select one entity by key
        /// </summary>
        /// <param name="roleName">RoleName</param>
        /// <returns>An entity</returns>
        [HttpGet]
        [Route("Api/Data/Role/SelectOne")]
        public Role SelectOne(System.String roleName)
        {
            var key = new Dictionary<string, object>();
            key.Add("RoleName", roleName);

            using (var conn = new SqlConnection(_connStr))
            {
                conn.Open();
                return (new RoleRepository(conn)).SelectOne(key) as Role;
            }
        }

        /// <summary>
        /// Select all entities
        /// </summary>
        /// <param name="skip">Skip</param>
        /// <param name="take">Take</param>
        /// <returns>A collection of entities</returns>
        [HttpGet]
        [Route("Api/Data/Role/SelectAll")]
        public BaseEntityCollection<Role> SelectAll(int skip = 0, int take = 100)
        {
            using (var conn = new SqlConnection(_connStr))
            {
                conn.Open();
                return (new RoleRepository(conn)).SelectAll(skip, take).To<Role>();
            }
        }

        /// <summary>
        /// Count entities
        /// </summary>
        /// <returns>Num. of entities</returns>
        [HttpGet]
        [Route("Api/Data/Role/Count")]
        public int Count()
        {
            using (var conn = new SqlConnection(_connStr))
            {
                conn.Open();
                return (new RoleRepository(conn)).Count();
            }
        }
    }
    #endregion

    #region Right
    public partial class RightDataController : ApiController
    {
        private readonly string _connStr =
            ConfigurationManager.ConnectionStrings["AppBase"].ConnectionString;

        /// <summary>
        /// Insert or update entity
        /// </summary>
        /// <param name="entity">Entity</param>
        [HttpPost]
        [Route("Api/Data/Right/InsertOrUpdate")]
        public void InsertOrUpdate(Right entity)
        {
            using (var conn = new SqlConnection(_connStr))
            {
                conn.Open();
                entity.CreateRepository(conn).InsertOrUpdate(entity);
            }
        }

        /// <summary>
        /// Delete entity
        /// </summary>
        /// <param name="entity">Entity</param>
        [HttpPost]
        [Route("Api/Data/Right/Delete")]
        public void Delete(Right entity)
        {
            using (var conn = new SqlConnection(_connStr))
            {
                conn.Open();
                entity.CreateRepository(conn).Delete(entity);
            }
        }

        /// <summary>
        /// Select one entity by key
        /// </summary>
        /// <param name="roleName">RoleName</param>
        /// <param name="functionName">FunctionName</param>
        /// <returns>An entity</returns>
        [HttpGet]
        [Route("Api/Data/Right/SelectOne")]
        public Right SelectOne(System.String roleName, System.String functionName)
        {
            var key = new Dictionary<string, object>();
            key.Add("RoleName", roleName);
            key.Add("FunctionName", functionName);

            using (var conn = new SqlConnection(_connStr))
            {
                conn.Open();
                return (new RightRepository(conn)).SelectOne(key) as Right;
            }
        }

        /// <summary>
        /// Select all entities
        /// </summary>
        /// <param name="skip">Skip</param>
        /// <param name="take">Take</param>
        /// <returns>A collection of entities</returns>
        [HttpGet]
        [Route("Api/Data/Right/SelectAll")]
        public BaseEntityCollection<Right> SelectAll(int skip = 0, int take = 100)
        {
            using (var conn = new SqlConnection(_connStr))
            {
                conn.Open();
                return (new RightRepository(conn)).SelectAll(skip, take).To<Right>();
            }
        }

        /// <summary>
        /// Count entities
        /// </summary>
        /// <returns>Num. of entities</returns>
        [HttpGet]
        [Route("Api/Data/Right/Count")]
        public int Count()
        {
            using (var conn = new SqlConnection(_connStr))
            {
                conn.Open();
                return (new RightRepository(conn)).Count();
            }
        }
    }
    #endregion

    #region Tab
    public partial class TabDataController : ApiController
    {
        private readonly string _connStr =
            ConfigurationManager.ConnectionStrings["AppBase"].ConnectionString;

        /// <summary>
        /// Insert or update entity
        /// </summary>
        /// <param name="entity">Entity</param>
        [HttpPost]
        [Route("Api/Data/Tab/InsertOrUpdate")]
        public void InsertOrUpdate(Tab entity)
        {
            using (var conn = new SqlConnection(_connStr))
            {
                conn.Open();
                entity.CreateRepository(conn).InsertOrUpdate(entity);
            }
        }

        /// <summary>
        /// Delete entity
        /// </summary>
        /// <param name="entity">Entity</param>
        [HttpPost]
        [Route("Api/Data/Tab/Delete")]
        public void Delete(Tab entity)
        {
            using (var conn = new SqlConnection(_connStr))
            {
                conn.Open();
                entity.CreateRepository(conn).Delete(entity);
            }
        }

        /// <summary>
        /// Select one entity by key
        /// </summary>
        /// <param name="cod">Cod</param>
        /// <returns>An entity</returns>
        [HttpGet]
        [Route("Api/Data/Tab/SelectOne")]
        public Tab SelectOne(System.String cod)
        {
            var key = new Dictionary<string, object>();
            key.Add("Cod", cod);

            using (var conn = new SqlConnection(_connStr))
            {
                conn.Open();
                return (new TabRepository(conn)).SelectOne(key) as Tab;
            }
        }

        /// <summary>
        /// Select all entities
        /// </summary>
        /// <param name="skip">Skip</param>
        /// <param name="take">Take</param>
        /// <returns>A collection of entities</returns>
        [HttpGet]
        [Route("Api/Data/Tab/SelectAll")]
        public BaseEntityCollection<Tab> SelectAll(int skip = 0, int take = 100)
        {
            using (var conn = new SqlConnection(_connStr))
            {
                conn.Open();
                return (new TabRepository(conn)).SelectAll(skip, take).To<Tab>();
            }
        }

        /// <summary>
        /// Count entities
        /// </summary>
        /// <returns>Num. of entities</returns>
        [HttpGet]
        [Route("Api/Data/Tab/Count")]
        public int Count()
        {
            using (var conn = new SqlConnection(_connStr))
            {
                conn.Open();
                return (new TabRepository(conn)).Count();
            }
        }
    }
    #endregion

    #region TabRow
    public partial class TabRowDataController : ApiController
    {
        private readonly string _connStr =
            ConfigurationManager.ConnectionStrings["AppBase"].ConnectionString;

        /// <summary>
        /// Insert or update entity
        /// </summary>
        /// <param name="entity">Entity</param>
        [HttpPost]
        [Route("Api/Data/TabRow/InsertOrUpdate")]
        public void InsertOrUpdate(TabRow entity)
        {
            using (var conn = new SqlConnection(_connStr))
            {
                conn.Open();
                entity.CreateRepository(conn).InsertOrUpdate(entity);
            }
        }

        /// <summary>
        /// Delete entity
        /// </summary>
        /// <param name="entity">Entity</param>
        [HttpPost]
        [Route("Api/Data/TabRow/Delete")]
        public void Delete(TabRow entity)
        {
            using (var conn = new SqlConnection(_connStr))
            {
                conn.Open();
                entity.CreateRepository(conn).Delete(entity);
            }
        }

        /// <summary>
        /// Select one entity by key
        /// </summary>
        /// <param name="codTab">CodTab</param>
        /// <param name="cod">Cod</param>
        /// <returns>An entity</returns>
        [HttpGet]
        [Route("Api/Data/TabRow/SelectOne")]
        public TabRow SelectOne(System.String codTab, System.String cod)
        {
            var key = new Dictionary<string, object>();
            key.Add("CodTab", codTab);
            key.Add("Cod", cod);

            using (var conn = new SqlConnection(_connStr))
            {
                conn.Open();
                return (new TabRowRepository(conn)).SelectOne(key) as TabRow;
            }
        }

        /// <summary>
        /// Select all entities
        /// </summary>
        /// <param name="skip">Skip</param>
        /// <param name="take">Take</param>
        /// <returns>A collection of entities</returns>
        [HttpGet]
        [Route("Api/Data/TabRow/SelectAll")]
        public BaseEntityCollection<TabRow> SelectAll(int skip = 0, int take = 100)
        {
            using (var conn = new SqlConnection(_connStr))
            {
                conn.Open();
                return (new TabRowRepository(conn)).SelectAll(skip, take).To<TabRow>();
            }
        }

        /// <summary>
        /// Count entities
        /// </summary>
        /// <returns>Num. of entities</returns>
        [HttpGet]
        [Route("Api/Data/TabRow/Count")]
        public int Count()
        {
            using (var conn = new SqlConnection(_connStr))
            {
                conn.Open();
                return (new TabRowRepository(conn)).Count();
            }
        }
    }
    #endregion

    #region TabRowDetail
    public partial class TabRowDetailDataController : ApiController
    {
        private readonly string _connStr =
            ConfigurationManager.ConnectionStrings["AppBase"].ConnectionString;

        /// <summary>
        /// Insert or update entity
        /// </summary>
        /// <param name="entity">Entity</param>
        [HttpPost]
        [Route("Api/Data/TabRowDetail/InsertOrUpdate")]
        public void InsertOrUpdate(TabRowDetail entity)
        {
            using (var conn = new SqlConnection(_connStr))
            {
                conn.Open();
                entity.CreateRepository(conn).InsertOrUpdate(entity);
            }
        }

        /// <summary>
        /// Delete entity
        /// </summary>
        /// <param name="entity">Entity</param>
        [HttpPost]
        [Route("Api/Data/TabRowDetail/Delete")]
        public void Delete(TabRowDetail entity)
        {
            using (var conn = new SqlConnection(_connStr))
            {
                conn.Open();
                entity.CreateRepository(conn).Delete(entity);
            }
        }

        /// <summary>
        /// Select one entity by key
        /// </summary>
        /// <param name="codTab">CodTab</param>
        /// <param name="cod">Cod</param>
        /// <returns>An entity</returns>
        [HttpGet]
        [Route("Api/Data/TabRowDetail/SelectOne")]
        public TabRowDetail SelectOne(System.String codTab, System.String cod)
        {
            var key = new Dictionary<string, object>();
            key.Add("CodTab", codTab);
            key.Add("Cod", cod);

            using (var conn = new SqlConnection(_connStr))
            {
                conn.Open();
                return (new TabRowDetailRepository(conn)).SelectOne(key) as TabRowDetail;
            }
        }

        /// <summary>
        /// Select all entities
        /// </summary>
        /// <param name="skip">Skip</param>
        /// <param name="take">Take</param>
        /// <returns>A collection of entities</returns>
        [HttpGet]
        [Route("Api/Data/TabRowDetail/SelectAll")]
        public BaseEntityCollection<TabRowDetail> SelectAll(int skip = 0, int take = 100)
        {
            using (var conn = new SqlConnection(_connStr))
            {
                conn.Open();
                return (new TabRowDetailRepository(conn)).SelectAll(skip, take).To<TabRowDetail>();
            }
        }

        /// <summary>
        /// Count entities
        /// </summary>
        /// <returns>Num. of entities</returns>
        [HttpGet]
        [Route("Api/Data/TabRowDetail/Count")]
        public int Count()
        {
            using (var conn = new SqlConnection(_connStr))
            {
                conn.Open();
                return (new TabRowDetailRepository(conn)).Count();
            }
        }
    }
    #endregion

    #region Function
    public partial class FunctionDataController : ApiController
    {
        private readonly string _connStr =
            ConfigurationManager.ConnectionStrings["AppBase"].ConnectionString;

        /// <summary>
        /// Insert or update entity
        /// </summary>
        /// <param name="entity">Entity</param>
        [HttpPost]
        [Route("Api/Data/Function/InsertOrUpdate")]
        public void InsertOrUpdate(Function entity)
        {
            using (var conn = new SqlConnection(_connStr))
            {
                conn.Open();
                entity.CreateRepository(conn).InsertOrUpdate(entity);
            }
        }

        /// <summary>
        /// Delete entity
        /// </summary>
        /// <param name="entity">Entity</param>
        [HttpPost]
        [Route("Api/Data/Function/Delete")]
        public void Delete(Function entity)
        {
            using (var conn = new SqlConnection(_connStr))
            {
                conn.Open();
                entity.CreateRepository(conn).Delete(entity);
            }
        }

        /// <summary>
        /// Select one entity by key
        /// </summary>
        /// <param name="functionName">FunctionName</param>
        /// <returns>An entity</returns>
        [HttpGet]
        [Route("Api/Data/Function/SelectOne")]
        public Function SelectOne(System.String functionName)
        {
            var key = new Dictionary<string, object>();
            key.Add("FunctionName", functionName);

            using (var conn = new SqlConnection(_connStr))
            {
                conn.Open();
                return (new FunctionRepository(conn)).SelectOne(key) as Function;
            }
        }

        /// <summary>
        /// Select all entities
        /// </summary>
        /// <param name="skip">Skip</param>
        /// <param name="take">Take</param>
        /// <returns>A collection of entities</returns>
        [HttpGet]
        [Route("Api/Data/Function/SelectAll")]
        public BaseEntityCollection<Function> SelectAll(int skip = 0, int take = 100)
        {
            using (var conn = new SqlConnection(_connStr))
            {
                conn.Open();
                return (new FunctionRepository(conn)).SelectAll(skip, take).To<Function>();
            }
        }

        /// <summary>
        /// Count entities
        /// </summary>
        /// <returns>Num. of entities</returns>
        [HttpGet]
        [Route("Api/Data/Function/Count")]
        public int Count()
        {
            using (var conn = new SqlConnection(_connStr))
            {
                conn.Open();
                return (new FunctionRepository(conn)).Count();
            }
        }
    }
    #endregion

}