<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Configuration" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="$(TargetPath)" #>
<#@ assembly name="$(TargetDir)\AppBase.ORM.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="AppBase.ORM" #>
<#@ output extension=".cs" #>
<#
    var modelPath = Path.Combine(
        Host.ResolveAssemblyReference("$(TargetDir)"),
        "CompleteModel.json"
        );
    var model = Model.Load(modelPath);
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AppBase.WebAPI.Controllers
{
    using Newtonsoft.Json;
    using ORM;
    using ORM.Entities;
    using System;
    using System.Collections.Generic;
    using System.Collections.Specialized;
    using System.Configuration;
    using System.Data;
    using System.Data.SqlClient;
    using System.Diagnostics;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Text;
    using System.Threading.Tasks;
    using System.Web.Http;

<#
    foreach (var entity in model.Entities)
    {
        var entityKeyFields = entity.GetKeyFields();
        var entityFields = entity.GetFields();
        var keyFields = new Dictionary<ModelField, Tuple<string, string>>();
        foreach (var field in entityKeyFields)
            keyFields.Add(field,
                new Tuple<string, string>(
                    Char.ToLowerInvariant(field.FieldName[0]) + field.FieldName.Substring(1),
                    field.GetFieldType()
                    ));
#>
    #region <#= entity.Name #>
    public partial class <#= entity.Name #>DataController : ApiController
    {
        private readonly string _connStr =
            ConfigurationManager.ConnectionStrings["AppBase"].ConnectionString;

        /// <summary>
        /// Insert or update entity
        /// </summary>
        /// <param name="entity">Entity</param>
        [HttpPost]
        [Route("Api/Data/<#= entity.Name #>/InsertOrUpdate")]
        public void InsertOrUpdate(<#= entity.Name #> entity)
        {
            using (var conn = new SqlConnection(_connStr))
            {
                conn.Open();
                entity.CreateRepository(conn).InsertOrUpdate(entity);
            }
        }

        /// <summary>
        /// Delete entity
        /// </summary>
        /// <param name="entity">Entity</param>
        [HttpPost]
        [Route("Api/Data/<#= entity.Name #>/Delete")]
        public void Delete(<#= entity.Name #> entity)
        {
            using (var conn = new SqlConnection(_connStr))
            {
                conn.Open();
                entity.CreateRepository(conn).Delete(entity);
            }
        }

        /// <summary>
        /// Select one entity by key
        /// </summary>
<#
    foreach (var field in keyFields)
    {
#>
        /// <param name="<#= field.Value.Item1 #>"><#= field.Key.FieldName #></param>
<#
    }
#>
        /// <returns>An entity</returns>
        [HttpGet]
        [Route("Api/Data/<#= entity.Name #>/SelectOne")]
        public <#= entity.Name #> SelectOne(<#= string.Join(", ", keyFields.Select(x => x.Value.Item2 + " " + x.Value.Item1)) #>)
        {
            var key = new Dictionary<string, object>();
<#
        foreach (var field in keyFields)
        {
#>
            key.Add("<#= field.Key.FieldName #>", <#= field.Value.Item1 #>);
<#
        }
#>

            using (var conn = new SqlConnection(_connStr))
            {
                conn.Open();
                return (new <#= entity.Name #>Repository(conn)).SelectOne(key) as <#= entity.Name #>;
            }
        }

        /// <summary>
        /// Select all entities
        /// </summary>
        /// <param name="skip">Skip</param>
        /// <param name="take">Take</param>
        /// <returns>A collection of entities</returns>
        [HttpGet]
        [Route("Api/Data/<#= entity.Name #>/SelectAll")]
        public BaseEntityCollection<<#= entity.Name #>> SelectAll(int skip = 0, int take = 100)
        {
            using (var conn = new SqlConnection(_connStr))
            {
                conn.Open();
                return (new <#= entity.Name #>Repository(conn)).SelectAll(skip, take).To<<#= entity.Name #>>();
            }
        }

        /// <summary>
        /// Count entities
        /// </summary>
        /// <returns>Num. of entities</returns>
        [HttpGet]
        [Route("Api/Data/<#= entity.Name #>/Count")]
        public int Count()
        {
            using (var conn = new SqlConnection(_connStr))
            {
                conn.Open();
                return (new <#= entity.Name #>Repository(conn)).Count();
            }
        }
    }
    #endregion

<#
    }
#>
}